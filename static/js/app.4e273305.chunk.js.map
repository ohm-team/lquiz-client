{"version":3,"sources":["src/pages/HomePage/assets/logo.png","src/pages/HomePage/assets/logo_dark.png","src/config/themes.ts","src/config/locales.ts","src/utils/locales.ts","src/contexts/SettingsContext/SettingsContext.tsx","src/pages/GamePage/GamePage.service.ts","src/components/AppLayout/AppLayout.tsx","src/components/LocaleSelector/LocaleSelector.tsx","src/utils/native.ts","src/components/ThemeToggler/ThemeToggler.styles.tsx","src/components/ThemeToggler/ThemeToggler.tsx","src/pages/HomePage/HomePage.styles.ts","src/pages/HomePage/HomePage.tsx","src/pages/RulesPage/RulesPage.styles.ts","src/pages/RulesPage/RulesPage.tsx","src/pages/GameOverPage/GameOverPage.styles.ts","src/pages/GameOverPage/GameOverPage.tsx","src/pages/GameOverPage/GameOverPage.container.tsx","src/pages/GamePage/GamePage.styles.ts","src/pages/GamePage/GamePageAnswer/GamePageAnswer.styles.ts","src/pages/GamePage/GamePageAnswer/GamePageAnswer.tsx","src/pages/GamePage/GamePage.tsx","src/pages/GamePage/GamePageContainer.tsx","src/pages/SettingsPage/Settings.styles.ts","src/pages/SettingsPage/Settings.tsx","src/pages/index.tsx","App.tsx"],"names":["module","exports","defaultThemeName","Appearance","getColorScheme","locales","key","internationalName","localName","getBrowserLocale","supportedLocales","fallbackLocale","browserLocale","window","navigator","lang","language","locale","includes","localeToMatch","split","findLocale","questionsCache","getRandomName","min","max","names","require","length","Math","floor","random","getInitialValues","theme","map","l","nickName","SettingsContext","React","createContext","setSettings","resetSettings","SettingsContextProvider","props","settings","setState","state","newSettings","AsyncStorage","setItem","JSON","stringify","updateSettingsWithPersistedValue","a","async","getSettingsFromLocalStorage","json","getItem","parse","this","providerValue","Provider","value","children","PureComponent","useSettings","useContext","AppLayoutInternal","DarkTheme","DefaultTheme","NavigationContainer","translations","StatusBar","style","AppLayout","LocalSelector","buttonStyle","useState","visible","setVisible","closeMenu","Menu","onDismiss","anchor","Button","mode","onPress","message","Item","localeKey","title","openLinkInNewTab","url","Platform","OS","open","Linking","openURL","StyleSheet","create","text","marginRight","switchContainer","flexDirection","alignItems","justifyContent","ThemeToggler","withText","t","useLocale","View","styles","Paragraph","Switch","trackColor","accessibilityRole","accessibilityLabel","onValueChange","isDark","container","flex","minHeight","ribbon","position","top","right","zIndex","card","width","height","borderRadius","backgroundColor","display","cardContent","cardImageContainer","elevation","buttonsContainer","marginTop","linearGradient","cardImage","cardTitle","marginBottom","color","cardButton","themeToggler","left","getButtonTheme","isDarkTheme","colors","primary","getGradientColors","HomePage","navigation","gitHubRibbonUrl","handleLinkButtonClick","routeName","args","navigate","Card","Text","href","accessibilityL","target","loading","src","alt","data-recalc-dims","LinearGradient","locations","Content","Image","source","logo","darkLogo","minWidth","padding","content","header","fontSize","lineHeight","LeftContent","label","RulesPage","ScrollView","contentContainerStyle","SafeAreaView","Title","flexWrap","button","paddingTop","paddingBottom","progressBar","transform","scaleX","scaleY","translateY","opacity","textAlign","feedback","paddingLeft","paddingRight","GameOverPage","facebookShareMessage","facebookShareURL","userStatus","pace","accuracy","correctAnswered","totalAnswered","paceStatus","goto","postOnFacebook","facebookParameters","encodeURI","join","Cover","accessible","uri","ProgressBar","progress","Colors","green800","GameOverPageContainer","params","route","gameResults","gamePace","round","reduce","v","filter","Boolean","overflow","coverContainer","coverButtonContainer","bottom","nextQuestionButton","paddingHorizontal","paddingVertical","titleStatistics","fontStyle","sourceLinksContainer","sourceLink","black","titleValue","fontWeight","maxWidth","buttonContent","statistics","successTheme","green300","warningTheme","red300","defaultColors","lime300","purple200","amber300","lightBlue300","GamePageAnswer","onAnswerClick","id","answerStatistics","answerValue","isLoading","isAnyQuestionLoading","isSelected","isCorrectAnswer","isAnswerRevealed","index","undefined","contentStyle","disabled","GamePage","totalQuestionsCount","currentQuestionNumber","question","answers","isQuestionLoading","onBackButtonClick","questionLoadingId","correctAnswerId","selectedAnswerId","isNextButtonVisible","onNextButtonClick","whatValue","whatStart","whatEnd","subtitle","indeterminate","imgSrc","labelStyle","answerUrl","whatStatistics","toString","Actions","i","transformQuestion","q","correctAnswerIndex","fetchAllQuizQuestions","questionsCount","fetch","method","headers","Accept","response","questions","Promise","resolve","fetchQuestionByIndex","reject","setTimeout","checkQuestion","questionId","find","Error","GamePageContainer","setCurrentQuestionNumber","currentQuestion","setCurrentQuestion","setCorrectAnswerId","setSelectedAnswerId","setIsQuestionLoading","stats","setStats","useEffect","started","Date","now","questionNumber","fetchData","ended","isCorrect","checkAnswer","nextQuestionNumber","alignSelf","Settings","Stack","createStackNavigator","screenOptions","animationEnabled","Pages","Navigator","headerMode","initialRouteName","Screen","options","name","component","SettingsPage","App"],"mappings":"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","file":"static/js/app.4e273305.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.d5818779.png\";","module.exports = __webpack_public_path__ + \"static/media/logo_dark.fcb399cb.png\";","import { Appearance } from \"react-native\";\n\nexport const themes = [\"default\", \"dark\"] as const;\n\nexport const defaultThemeName: ThemeName =\n  Appearance.getColorScheme() === \"dark\" ? \"dark\" : \"default\";\n\nexport type ThemeName = typeof themes[number];\n","export const locales = [\n  {\n    key: \"en-US\",\n    internationalName: \"English (US)\",\n    localName: \"English (US)\",\n  },\n  {\n    key: \"fr\",\n    internationalName: \"French\",\n    localName: \"Française\",\n  },\n] as const;\n\nexport type Locale = typeof locales[number][\"key\"];\n","// Originally taken from https://github.com/trucknet-io/react-targem/blob/develop/src/utils/locale.ts\n\nimport { Locale } from \"src/config/locales\";\n\nexport function findLocale(\n  supportedLocales: Locale[],\n  locale: string\n): Locale | undefined {\n  if (supportedLocales.includes(locale as Locale)) {\n    return locale as Locale;\n  }\n  for (const localeToMatch of supportedLocales) {\n    if (localeToMatch.includes(locale.split(\"-\")[0])) {\n      return localeToMatch;\n    }\n  }\n  return undefined;\n}\n\nexport function getBrowserLocale(\n  supportedLocales: Locale[],\n  fallbackLocale: Locale\n): Locale {\n  let browserLocale: Locale | undefined;\n  if (typeof window !== \"undefined\" && window.navigator) {\n    const lang = window.navigator.language;\n    if (lang) {\n      browserLocale = findLocale(supportedLocales, lang);\n    }\n  }\n\n  return browserLocale || fallbackLocale;\n}\n","import React, { useContext } from \"react\";\nimport { defaultThemeName, ThemeName } from \"src/config/themes\";\nimport { Locale, locales } from \"src/config/locales\";\nimport { getBrowserLocale } from \"src/utils/locales\";\nimport AsyncStorage from \"@react-native-community/async-storage\";\n\nconst LOCAL_STORAGE_KEY = \"settings\";\n\nconst getRandomInt = (min: number, max: number) => {\n  return min + Math.floor(Math.random() * (max - min + 1));\n};\n\nconst getRandomName = () => {\n  // eslint-disable-next-line @typescript-eslint/no-var-requires\n  const names: string[] = require(\"./names.json\");\n\n  const name = names[getRandomInt(0, names.length - 1)];\n  return name;\n};\n\ninterface SettingsContextProviderState {\n  locale: Locale;\n  theme: ThemeName;\n  nickName: string;\n}\n\nexport interface SettingsContext extends SettingsContextProviderState {\n  setSettings: (state: Partial<SettingsContextProviderState>) => void;\n  resetSettings: () => void;\n}\n\nconst getInitialValues = (): SettingsContextProviderState => ({\n  theme: defaultThemeName,\n  locale: getBrowserLocale(\n    locales.map((l) => l.key),\n    locales[0].key\n  ),\n  nickName: getRandomName(),\n});\n\nconst SettingsContext = React.createContext<SettingsContext>({\n  ...getInitialValues(),\n  // eslint-disable-next-line @typescript-eslint/no-empty-function\n  setSettings: () => {},\n  // eslint-disable-next-line @typescript-eslint/no-empty-function\n  resetSettings: () => {},\n});\n\nexport class SettingsContextProvider extends React.PureComponent<\n  Partial<SettingsContextProviderState>,\n  SettingsContextProviderState\n> {\n  constructor(props: Partial<SettingsContext>) {\n    super(props);\n    this.state = {\n      ...getInitialValues(),\n    };\n    void this.updateSettingsWithPersistedValue();\n  }\n\n  public render(): React.ReactNode {\n    const { state, props } = this;\n\n    const providerValue = {\n      ...state,\n      ...props,\n      setSettings: this.setSettings,\n      resetSettings: this.resetSettings,\n    };\n\n    return (\n      <SettingsContext.Provider value={providerValue}>\n        {props.children}\n      </SettingsContext.Provider>\n    );\n  }\n\n  private setSettings = (settings: Partial<SettingsContextProviderState>) => {\n    this.setState((state: SettingsContextProviderState) => {\n      const newSettings = {\n        ...state,\n        ...settings,\n      };\n      void AsyncStorage.setItem(LOCAL_STORAGE_KEY, JSON.stringify(newSettings));\n      return newSettings;\n    });\n  };\n\n  private updateSettingsWithPersistedValue = async (): Promise<void> => {\n    const json = await this.getSettingsFromLocalStorage();\n    this.setState((state) => ({\n      ...state,\n      ...json,\n    }));\n  };\n\n  private getSettingsFromLocalStorage = async (): Promise<\n    Partial<SettingsContextProviderState>\n  > => {\n    const json = await AsyncStorage.getItem(LOCAL_STORAGE_KEY);\n\n    if (!json) {\n      return {};\n    }\n\n    return JSON.parse(json);\n  };\n\n  private resetSettings = () => {\n    this.setState(getInitialValues());\n  };\n}\n\nexport const useSettings = (): SettingsContext => useContext(SettingsContext);\n","import { QuestionWithAnswers } from \"../types\";\n\ninterface BackendQuestion {\n  question: {\n    whatStatistics: string;\n    whatValue: string;\n    value: number;\n    correctAnswerIndex: number;\n    url: string;\n    answerUrl: string;\n  };\n  answers: { answerStatistics: string; answerValue: string }[];\n}\n\nexport const transformQuestion = (\n  q: BackendQuestion,\n  i: number\n): QuestionWithAnswers => {\n  return {\n    question: {\n      whatStatistics: q.question.whatStatistics,\n      whatValue: q.question.whatValue,\n      value: q.question.value,\n      imgSrc: `https://source.unsplash.com/random?quiz&version=${i}`,\n      correctAnswerId: q.question.correctAnswerIndex.toString(),\n      url: q.question.url,\n      answerUrl: q.question.answerUrl,\n    },\n    id: i.toString(),\n    answers: q.answers.map((a, id) => ({\n      answerStatistics: a.answerStatistics,\n      answerValue: a.answerValue,\n      id: id.toString(),\n    })),\n  };\n};\n\nexport const QUESTIONS_COUNT = 20;\n\nlet questionsCache: QuestionWithAnswers[];\n\nconst fetchAllQuizQuestions = async (\n  questionsCount: number,\n  locale: string\n) => {\n  const response = await fetch(\n    `https://lquiz-backend.goooseman.ru/generate_questions?count=${questionsCount}&locale=${locale}`,\n    {\n      method: \"GET\",\n      headers: {\n        Accept: \"application/json\",\n        \"Content-Type\": \"application/json\",\n      },\n    }\n  );\n  const { questions } = await response.json();\n\n  return Promise.resolve(questions.map(transformQuestion));\n};\n\nexport const fetchQuestionByIndex = async (\n  index: number,\n  locale: string\n): Promise<QuestionWithAnswers> => {\n  questionsCache = await fetchAllQuizQuestions(QUESTIONS_COUNT, locale);\n  return new Promise((resolve, reject) => {\n    if (index > QUESTIONS_COUNT) {\n      reject(\"No such question\");\n      return;\n    }\n    setTimeout(() => {\n      resolve(questionsCache[index]);\n    }, 1500);\n  });\n};\n\n// eslint-disable-next-line\nexport const checkQuestion = async (\n  questionId: string\n): Promise<{ correctAnswerId: string }> => {\n  const question = questionsCache.find((q) => q.id === questionId);\n  if (!question) {\n    throw new Error(\"No such question\");\n  }\n  return {\n    correctAnswerId: question.question.correctAnswerId,\n  };\n};\n","import { StatusBar } from \"expo-status-bar\";\nimport React from \"react\";\nimport { TargemProvider } from \"react-targem\";\n// eslint-disable-next-line @typescript-eslint/ban-ts-comment\n// @ts-ignore\nimport translations from \"src/i18n/translations.json\";\nimport {\n  Provider as PaperProvider,\n  DarkTheme,\n  DefaultTheme,\n} from \"react-native-paper\";\nimport {\n  SettingsContextProvider,\n  useSettings,\n} from \"src/contexts/SettingsContext\";\nimport \"react-native-gesture-handler\";\nimport { NavigationContainer } from \"@react-navigation/native\";\nimport { SafeAreaProvider } from \"react-native-safe-area-context\";\n\nconst AppLayoutInternal: React.FC<AppLayoutInternalProps> = ({\n  children,\n}: AppLayoutInternalProps) => {\n  const { locale, theme } = useSettings();\n\n  return (\n    <SafeAreaProvider>\n      <PaperProvider theme={theme === \"dark\" ? DarkTheme : DefaultTheme}>\n        <NavigationContainer>\n          <TargemProvider locale={locale} translations={translations}>\n            {children}\n            <StatusBar style=\"auto\" />\n          </TargemProvider>\n        </NavigationContainer>\n      </PaperProvider>\n    </SafeAreaProvider>\n  );\n};\ninterface AppLayoutInternalProps extends React.PropsWithChildren<{}> {}\n\nconst AppLayout: React.FC<AppLayoutProps> = ({ children }: AppLayoutProps) => (\n  <SettingsContextProvider>\n    <AppLayoutInternal>{children}</AppLayoutInternal>\n  </SettingsContextProvider>\n);\n\ninterface AppLayoutProps extends React.PropsWithChildren<{}> {}\n\nexport default AppLayout;\n","import React from \"react\";\nimport { locales, Locale } from \"src/config/locales\";\nimport { useSettings } from \"src/contexts/SettingsContext\";\nimport { Button, Menu } from \"react-native-paper\";\nimport { StyleProp, ViewStyle } from \"react-native\";\nimport { T } from \"react-targem\";\n\nconst LocalSelector: React.FC<LocalSelectorProps> = ({\n  buttonStyle,\n  theme,\n}: LocalSelectorProps) => {\n  const { setSettings } = useSettings();\n  const handleLocaleChange = (localeKey: Locale) => () => {\n    setSettings({\n      locale: localeKey,\n    });\n    closeMenu();\n  };\n\n  const [visible, setVisible] = React.useState(false);\n  const openMenu = () => setVisible(true);\n  const closeMenu = () => setVisible(false);\n\n  return (\n    <Menu\n      visible={visible}\n      onDismiss={closeMenu}\n      anchor={\n        <Button\n          style={buttonStyle}\n          mode=\"outlined\"\n          theme={theme}\n          onPress={openMenu}\n        >\n          <T message=\"Choose language\" />\n        </Button>\n      }\n    >\n      {locales.map((l) => (\n        <Menu.Item\n          key={l.key}\n          onPress={handleLocaleChange(l.key)}\n          title={\n            <>\n              {l.localName} ({l.internationalName})\n            </>\n          }\n        />\n      ))}\n    </Menu>\n  );\n};\n\ninterface LocalSelectorProps {\n  buttonStyle: StyleProp<ViewStyle>;\n  theme: Object;\n}\n\nexport default LocalSelector;\n","import { Linking, Platform } from \"react-native\";\n\nexport const openLinkInNewTab = async (url: string) => {\n  if (Platform.OS === \"web\") {\n    return window.open(url, \"_blank\");\n  }\n  await Linking.openURL(url);\n};\n","import { StyleSheet } from \"react-native\";\n\nexport default StyleSheet.create({\n  text: {\n    marginRight: 5,\n  },\n  switchContainer: {\n    flexDirection: \"row\",\n    alignItems: \"center\",\n    justifyContent: \"space-between\",\n  },\n});\n","import React from \"react\";\nimport { View } from \"react-native\";\nimport { Paragraph, Switch } from \"react-native-paper\";\nimport { T, useLocale } from \"react-targem\";\nimport { useSettings } from \"src/contexts/SettingsContext\";\nimport styles from \"./ThemeToggler.styles\";\n\nconst ThemeToggler: React.FC<ThemeTogglerProps> = ({\n  withText = true,\n}: ThemeTogglerProps) => {\n  const { theme, setSettings } = useSettings();\n  const handleThemeChange = (isDark: boolean) => {\n    setSettings({ theme: isDark ? \"dark\" : \"default\" });\n  };\n\n  const { t } = useLocale();\n\n  return (\n    <View style={styles.switchContainer}>\n      {withText && (\n        <Paragraph style={styles.text}>\n          <T message=\"Dark theme?\" />\n        </Paragraph>\n      )}\n      <Switch\n        /* @ts-ignore */\n        trackColor=\"#001100\"\n        accessibilityRole=\"switch\"\n        accessibilityLabel={t(\"Toggle dark theme\")}\n        value={theme === \"dark\"}\n        onValueChange={handleThemeChange}\n      />\n    </View>\n  );\n};\n\ninterface ThemeTogglerProps {\n  withText?: boolean;\n}\n\nexport default ThemeToggler;\n","import { StyleSheet } from \"react-native\";\n\nexport default StyleSheet.create({\n  container: {\n    flex: 1,\n    flexDirection: \"row\",\n    alignItems: \"stretch\",\n    minHeight: \"100%\",\n  },\n  ribbon: {\n    position: \"absolute\",\n    top: 0,\n    right: 0,\n    zIndex: 10,\n  },\n  card: {\n    width: \"100%\",\n    height: \"100%\",\n    borderRadius: 0,\n    backgroundColor: \"#625772\",\n    position: \"relative\",\n    display: \"flex\",\n    flexDirection: \"row\",\n    alignItems: \"stretch\",\n  },\n  cardContent: {\n    alignItems: \"center\",\n    position: \"relative\",\n    display: \"flex\",\n    justifyContent: \"center\",\n    height: \"100%\",\n  },\n  cardImageContainer: {\n    elevation: 8,\n    height: \"100%\",\n    position: \"absolute\",\n  },\n  buttonsContainer: {\n    marginTop: 200,\n    alignItems: \"center\",\n    position: \"relative\",\n    display: \"flex\",\n    justifyContent: \"center\",\n  },\n  linearGradient: {\n    width: \"100%\",\n    height: \"100%\",\n  },\n  cardImage: {\n    width: 370,\n    height: \"100%\",\n  },\n  cardTitle: {\n    marginTop: 64,\n    marginBottom: 64,\n    color: \"#fff\",\n  },\n  cardButton: {\n    marginBottom: 20,\n  },\n  themeToggler: {\n    position: \"absolute\",\n    top: \"14%\",\n    left: 165,\n  },\n});\n","import { StackNavigationProp } from \"@react-navigation/stack\";\nimport { LinearGradient } from \"expo-linear-gradient\";\nimport React from \"react\";\nimport { Image, Platform, View, Text } from \"react-native\";\nimport { Button, Card } from \"react-native-paper\";\nimport { T } from \"react-targem\";\nimport LocalSelector from \"src/components/LocaleSelector\";\nimport { openLinkInNewTab } from \"src/utils/native\";\nimport ThemeToggler from \"../../components/ThemeToggler\";\nimport { useSettings } from \"../../contexts/SettingsContext\";\nimport { RootStackRoute, RootStackRoutes } from \"../types\";\nimport logo from \"./assets/logo.png\";\nimport darkLogo from \"./assets/logo_dark.png\";\nimport styles from \"./HomePage.styles\";\n\nconst MOBILE_APPLICATION_LINK = \"https://expo.io/@ohm-team/lquiz-client\";\n\nconst getButtonTheme = (isDarkTheme: boolean) => {\n  return isDarkTheme\n    ? {\n        colors: {\n          primary: \"#a3d3cf\",\n        },\n      }\n    : {\n        colors: {\n          primary: \"#322c3c\",\n        },\n      };\n};\nconst getGradientColors = (isDarkTheme: boolean): string[] => {\n  return isDarkTheme\n    ? [\"#625772\", \"#9585ae\", \"#322c3c\"]\n    : [\"#9585ae\", \"#c6b1e7\", \"#e3fff3\"];\n};\nconst HomePage: React.FC<HomePageProps> = ({ navigation }: HomePageProps) => {\n  const { theme } = useSettings();\n  const isDarkTheme = theme === \"dark\";\n\n  const gitHubRibbonUrl = isDarkTheme\n    ? \"https://github.blog/wp-content/uploads/2008/12/forkme_right_white_ffffff.png?resize=149%2C149\"\n    : \"https://github.blog/wp-content/uploads/2008/12/forkme_right_gray_6d6d6d.png?resize=149%2C149\";\n\n  const handleLinkButtonClick = (\n    routeName: RootStackRoute,\n    args?: any\n  ) => () => {\n    navigation.navigate(routeName, args);\n  };\n\n  const handleDownloadButtonClick = () => {\n    openLinkInNewTab(MOBILE_APPLICATION_LINK);\n  };\n\n  return (\n    <Card style={styles.card}>\n      {Platform.OS === \"web\" ? (\n        <Text\n          /* @ts-ignore */\n          href=\"https://github.com/ohm-team/lquiz-client\"\n          accessibilityL\n          accessibilityRole=\"link\"\n          target=\"_blank\"\n          style={styles.ribbon}\n        >\n          <img\n            loading=\"lazy\"\n            width=\"149\"\n            height=\"149\"\n            src={gitHubRibbonUrl}\n            alt=\"Fork me on GitHub\"\n            data-recalc-dims=\"1\"\n          />\n        </Text>\n      ) : null}\n      <LinearGradient\n        colors={getGradientColors(isDarkTheme)}\n        locations={[0, 0.18, 1]}\n        style={styles.linearGradient}\n      >\n        <Card.Content style={styles.cardContent}>\n          <View style={styles.cardImageContainer}>\n            <Image\n              source={isDarkTheme ? logo : darkLogo}\n              style={styles.cardImage}\n            />\n            <View style={styles.themeToggler}>\n              <ThemeToggler withText={false} />\n            </View>\n          </View>\n\n          <View style={styles.buttonsContainer}>\n            <Button\n              mode=\"contained\"\n              theme={getButtonTheme(isDarkTheme)}\n              onPress={handleLinkButtonClick(\"Game\")}\n              style={styles.cardButton}\n            >\n              <T message=\"Play\" />\n            </Button>\n            <Button\n              mode=\"outlined\"\n              theme={getButtonTheme(isDarkTheme)}\n              onPress={handleLinkButtonClick(\"Rules\")}\n              style={styles.cardButton}\n            >\n              <T message=\"Rules\" />\n            </Button>\n\n            {Platform.OS === \"web\" ? (\n              <Button\n                mode=\"outlined\"\n                theme={getButtonTheme(isDarkTheme)}\n                onPress={handleDownloadButtonClick}\n                style={styles.cardButton}\n              >\n                <T message=\"Download an app\" />\n              </Button>\n            ) : null}\n            <LocalSelector\n              buttonStyle={styles.cardButton}\n              theme={getButtonTheme(isDarkTheme)}\n            />\n          </View>\n        </Card.Content>\n      </LinearGradient>\n    </Card>\n  );\n};\n\ninterface HomePageProps {\n  navigation: StackNavigationProp<RootStackRoutes, \"Home\">;\n}\n\nexport default HomePage;\n","import { StyleSheet } from \"react-native\";\n\nexport default StyleSheet.create({\n  container: {\n    flex: 1,\n    flexDirection: \"row\",\n    alignItems: \"stretch\",\n    minHeight: \"100%\",\n  },\n  card: {\n    minHeight: \"100%\",\n    minWidth: \"100%\",\n    padding: 20,\n    borderRadius: 0,\n  },\n  content: {\n    marginTop: 20,\n  },\n  header: {\n    fontSize: 30,\n    lineHeight: 30,\n    marginBottom: 20,\n    marginTop: 20,\n  },\n  text: {\n    fontSize: 15,\n    lineHeight: 20,\n  },\n});\n","import { StackNavigationProp } from \"@react-navigation/stack\";\nimport React from \"react\";\nimport { Button, Card, Paragraph, Avatar } from \"react-native-paper\";\nimport { T } from \"react-targem\";\nimport { RootStackRoute, RootStackRoutes } from \"../types\";\nimport styles from \"./RulesPage.styles\";\nimport { SafeAreaView } from \"react-native-safe-area-context\";\nimport { ScrollView } from \"react-native\";\n\nconst LeftContent: React.FC<CardTitleAddon> = (props: CardTitleAddon) => (\n  <Avatar.Text {...props} label=\"R\" />\n);\n\ninterface CardTitleAddon {\n  size: number;\n}\n\nconst RulesPage: React.FC<RulesPageProps> = ({\n  navigation,\n}: RulesPageProps) => {\n  const handleLinkButtonClick = (routeName: RootStackRoute) => () => {\n    navigation.navigate(routeName);\n  };\n\n  const RightAddon = () => (\n    <Button mode=\"outlined\" onPress={handleLinkButtonClick(\"Home\")}>\n      <T message=\"Home\" />\n    </Button>\n  );\n\n  return (\n    <ScrollView contentContainerStyle={styles.container}>\n      <Card style={styles.card}>\n        <SafeAreaView>\n          <Card.Title\n            title={<T message=\"Rules\" />}\n            left={LeftContent}\n            right={RightAddon}\n          />\n          <Card.Content style={styles.content}>\n            <Paragraph style={styles.text}>\n              <T message=\"Within one game, you are assigned few questions based on open Luxembourg statistics from https://data.public.lu/\" />\n            </Paragraph>\n            <Paragraph>\n              <T message=\"You can measure how well you and your friends know random facts! And maybe learn something new (we don't guarantee that this information would be useful :))\" />\n            </Paragraph>\n          </Card.Content>\n        </SafeAreaView>\n      </Card>\n    </ScrollView>\n  );\n};\n\ninterface RulesPageProps {\n  navigation: StackNavigationProp<RootStackRoutes, \"Rules\">;\n}\n\nexport default RulesPage;\n","import { StyleSheet } from \"react-native\";\n\nexport default StyleSheet.create({\n  card: {\n    height: \"100%\",\n    width: \"100%\",\n    borderRadius: 0,\n  },\n  buttonsContainer: {\n    display: \"flex\",\n    flexWrap: \"wrap\",\n    justifyContent: \"center\",\n  },\n  button: {\n    marginTop: 16,\n    marginBottom: 16,\n    paddingTop: 16,\n    paddingBottom: 16,\n    minWidth: \"90%\",\n  },\n  title: {\n    marginTop: 32,\n    marginBottom: 8,\n  },\n  progressBar: {\n    height: 5,\n    transform: [{ scaleX: 1 }, { scaleY: 4 }, { translateY: 3 }],\n    opacity: 1,\n    borderRadius: 10,\n    marginBottom: 20,\n  },\n  text: {\n    fontSize: 20,\n    textAlign: \"center\",\n  },\n  feedback: {\n    fontSize: 30,\n    textAlign: \"center\",\n    marginBottom: 50,\n  },\n  content: {\n    paddingTop: 50,\n    paddingLeft: 50,\n    paddingRight: 50,\n  },\n});\n","/* eslint-disable react/prop-types */\nimport React from \"react\";\nimport { T } from \"react-targem\";\nimport { Button, Card, Avatar, Text } from \"react-native-paper\";\nimport { ProgressBar, Colors } from \"react-native-paper\";\nimport { View } from \"react-native\";\nimport styles from \"./GameOverPage.styles\";\nimport { openLinkInNewTab } from \"src/utils/native\";\nimport { RootStackRoute } from \"../types\";\n\nconst LeftContent: React.FC<CardTitleAddon> = (props: CardTitleAddon) => (\n  <Avatar.Text {...props} label=\"G\" />\n);\n\ninterface CardTitleAddon {\n  size: number;\n}\n\nconst GameOverPage: React.FC<GameOverPageProps> = ({\n  facebookShareMessage,\n  facebookShareURL,\n  userStatus,\n  pace,\n  accuracy,\n  correctAnswered,\n  totalAnswered,\n  paceStatus,\n  goto,\n}) => {\n  const RightContent: React.FC<CardTitleAddon> = () => (\n    <View style={{ display: \"flex\", flexDirection: \"row\" }}>\n      <Button mode=\"outlined\" onPress={postOnFacebook}>\n        <T message=\"Share\" />\n      </Button>\n      <Button onPress={goto(\"Home\")}>\n        <T message=\"Home\" />\n      </Button>\n    </View>\n  );\n  const postOnFacebook = () => {\n    const facebookParameters = [\n      [\"u\", facebookShareURL],\n      [\"quote\", facebookShareMessage],\n    ]\n      .map(([key, value]) => `${key}=${encodeURI(value)}`)\n      .join(\"&\");\n    const url = `https://www.facebook.com/sharer/sharer.php?${facebookParameters}`;\n    openLinkInNewTab(url);\n  };\n\n  return (\n    <Card style={styles.card}>\n      <Card.Title title={userStatus} left={LeftContent} right={RightContent} />\n      <Card.Cover\n        accessible={false}\n        source={{ uri: \"https://source.unsplash.com/random?finish\" }}\n      />\n      <Card.Content style={styles.content}>\n        <Text style={styles.feedback}>\n          {accuracy === 1 && (\n            <T message=\"Congratulations! You know literally EVERYTHING about Luxembourg! How did you achieve it?\" />\n          )}\n          {accuracy >= 0.8 && accuracy < 1 && (\n            <T message=\"Wow! Looks like you have been reading datasets from https://data.public.lu for a long time!\" />\n          )}\n          {accuracy >= 0.5 && accuracy < 0.8 && (\n            <T message=\"Great job! More then a half answers are correct! It's more than a luck, its your great erudition!\" />\n          )}\n          {accuracy > 0 && accuracy < 0.5 && (\n            <T message=\"You know something about Luxembourg, and today you learned a bit more, isn't it great?\" />\n          )}\n          {accuracy === 0 && (\n            <T message=\"Not your day :( Or maybe our algorithms created an extra-hard quiz? Try again!\" />\n          )}\n        </Text>\n        <Text style={styles.text}>\n          <T message=\"Accuracy\" />: {accuracy * 100}% ({correctAnswered}/\n          {totalAnswered})\n        </Text>\n        <ProgressBar style={styles.progressBar} progress={accuracy} />\n        <br />\n        <Text style={styles.text}>\n          <T message=\"Pace\" />: {pace} <T message=\"seconds per question\" />\n        </Text>\n        <ProgressBar\n          style={styles.progressBar}\n          progress={paceStatus}\n          color={Colors.green800}\n        />\n      </Card.Content>\n    </Card>\n  );\n};\n\ninterface GameOverPageProps {\n  facebookShareMessage: string;\n  facebookShareURL: string;\n  /** статус присваиваемый пользователю по результатам конкретного опроса */\n  userStatus: string;\n  pace: number;\n  accuracy: number;\n  correctAnswered: number;\n  totalAnswered: number;\n  paceStatus: number;\n\n  goto(routeName: RootStackRoute): () => void;\n}\n\nexport default GameOverPage;\n","/* eslint-disable react/prop-types */\nimport React from \"react\";\nimport { StackNavigationProp } from \"@react-navigation/stack\";\nimport { RouteProp } from \"@react-navigation/native\";\nimport GameOverPage from \"./GameOverPage\";\nimport { RootStackRoute, RootStackRoutes } from \"../types\";\n\nconst facebookShareURL = \"https://ohm-team.github.io/lquiz-client/\";\n\nconst GameOverPageContainer: React.FC<GameOverPageContainerProps> = ({\n  navigation,\n  route: { params },\n}) => {\n  const { gameResults, gamePace } = params;\n\n  const pace =\n    Math.round((gamePace.reduce((v, a) => v + a, 0) / gamePace.length) * 10) /\n    10;\n  const paceAvg = 20;\n  const totalAnswered = gameResults.length;\n  const correctAnswered = gameResults.filter(Boolean).length;\n  const accuracy = Math.round((100 * correctAnswered) / totalAnswered) / 100;\n  const paceStatus = Math.round((100 * pace) / paceAvg) / 100;\n  const facebookShareMessage = `My Luxembourg knoweledge is ${correctAnswered}/${totalAnswered}. Try it out to test your skills!`;\n  const goto = (routeName: RootStackRoute) => () => {\n    navigation.navigate(routeName);\n  };\n\n  const props = {\n    facebookShareMessage,\n    facebookShareURL,\n    accuracy,\n    userStatus: \"Game finished\",\n    paceStatus,\n    pace,\n    totalAnswered,\n    correctAnswered,\n    goto,\n  };\n\n  return <GameOverPage {...props} />;\n};\n\nexport default GameOverPageContainer;\n\ninterface GameOverPageContainerProps {\n  navigation: StackNavigationProp<RootStackRoutes, \"GameOver\">;\n  route: RouteProp<RootStackRoutes, \"GameOver\">;\n}\n","import { StyleSheet } from \"react-native\";\nimport { Colors } from \"react-native-paper\";\n\nexport default StyleSheet.create({\n  card: {\n    minHeight: \"100%\",\n    overflow: \"visible\",\n    width: \"100%\",\n    borderRadius: 0,\n  },\n  container: {\n    flex: 1,\n    flexDirection: \"row\",\n    alignItems: \"stretch\",\n    minHeight: \"100%\",\n  },\n  buttonsContainer: {\n    display: \"flex\",\n    flexWrap: \"wrap\",\n    justifyContent: \"center\",\n    marginBottom: 32,\n  },\n  coverContainer: {\n    position: \"relative\",\n  },\n  coverButtonContainer: {\n    position: \"absolute\",\n    top: 0,\n    right: 0,\n    left: 0,\n    bottom: 0,\n    justifyContent: \"center\",\n    alignItems: \"center\",\n    backgroundColor: \"rgba(0, 0, 0, 0.7)\",\n  },\n  nextQuestionButton: {\n    paddingHorizontal: 20,\n    paddingVertical: 10,\n  },\n  title: {\n    marginTop: 5,\n    textAlign: \"center\",\n    marginBottom: 0,\n  },\n  titleStatistics: {\n    marginTop: 16,\n    fontSize: 15,\n    textAlign: \"center\",\n    fontStyle: \"italic\",\n    marginBottom: 0,\n  },\n  sourceLinksContainer: {\n    position: \"absolute\",\n    bottom: 0,\n    backgroundColor: \"rgba(255,255,255,.7)\",\n    borderRadius: 5,\n    paddingLeft: 10,\n    paddingRight: 10,\n    display: \"flex\",\n    justifyContent: \"flex-end\",\n    flexDirection: \"row\",\n    alignItems: \"center\",\n    marginBottom: 20,\n  },\n  sourceLink: {\n    color: Colors.black,\n  },\n  titleValue: {\n    fontWeight: \"bold\",\n    fontSize: 22,\n  },\n});\n","import { StyleSheet } from \"react-native\";\n\nexport default StyleSheet.create({\n  button: {\n    marginTop: 10,\n    marginBottom: 10,\n    minWidth: \"90%\",\n    maxWidth: \"100%\",\n  },\n  buttonContent: {\n    minHeight: 55,\n  },\n  statistics: {\n    fontStyle: \"italic\",\n  },\n  value: {},\n});\n","import React from \"react\";\nimport { Text } from \"react-native\";\nimport { Button, Colors } from \"react-native-paper\";\nimport styles from \"./GamePageAnswer.styles\";\n\nconst successTheme = {\n  colors: {\n    primary: Colors.green300,\n  },\n};\n\nconst warningTheme = {\n  colors: {\n    primary: Colors.red300,\n  },\n};\n\nconst defaultColors = [\n  Colors.lime300,\n  Colors.purple200,\n  Colors.amber300,\n  Colors.lightBlue300,\n];\n\nconst GamePageAnswer: React.FC<GamePageAnswerProps> = ({\n  onAnswerClick,\n  id,\n  answerStatistics,\n  answerValue,\n  isLoading,\n  isAnyQuestionLoading,\n  isSelected,\n  isCorrectAnswer,\n  isAnswerRevealed,\n  index,\n}: GamePageAnswerProps) => {\n  const handleAnswerClick = () => {\n    onAnswerClick(id);\n  };\n\n  const getTheme = () => {\n    if (isCorrectAnswer === true) {\n      return successTheme;\n    }\n\n    if (!isSelected || isAnyQuestionLoading) {\n      return {\n        colors: {\n          primary: defaultColors[index],\n        },\n      };\n    }\n\n    return warningTheme;\n  };\n\n  return (\n    <Button\n      onPress={!isAnswerRevealed ? handleAnswerClick : undefined}\n      style={styles.button}\n      contentStyle={styles.buttonContent}\n      mode=\"contained\"\n      disabled={\n        isAnyQuestionLoading ||\n        (isAnswerRevealed && !isSelected && !isCorrectAnswer)\n      }\n      loading={isLoading}\n      theme={getTheme()}\n    >\n      {isLoading ? null : (\n        <>\n          <Text style={styles.value}>{answerValue}</Text>{\" \"}\n          <Text style={styles.statistics}>{answerStatistics}</Text>\n        </>\n      )}\n    </Button>\n  );\n};\n\ninterface GamePageAnswerProps {\n  id: string;\n  index: number;\n  onAnswerClick: (answerId: string) => void;\n  answerStatistics: string;\n  answerValue: string;\n  isLoading: boolean;\n  isAnyQuestionLoading: boolean;\n  isAnswerRevealed: boolean;\n  isSelected: boolean;\n  isCorrectAnswer: boolean;\n}\n\nexport default GamePageAnswer;\n","import React from \"react\";\nimport { ScrollView, View } from \"react-native\";\nimport {\n  Avatar,\n  Button,\n  Card,\n  ProgressBar,\n  Text,\n  Title,\n} from \"react-native-paper\";\nimport { SafeAreaView } from \"react-native-safe-area-context\";\nimport { T } from \"react-targem\";\nimport { openLinkInNewTab } from \"src/utils/native\";\nimport { Answer, Question } from \"../types\";\nimport styles from \"./GamePage.styles\";\nimport GamePageAnswer from \"./GamePageAnswer\";\n\nconst LeftContent: React.FC<CardTitleAddon> = (props: CardTitleAddon) => (\n  <Avatar.Text {...props} label=\"Q\" />\n);\n\ninterface CardTitleAddon {\n  size: number;\n}\n\nconst GamePage: React.FC<GamePageProps> = ({\n  totalQuestionsCount,\n  currentQuestionNumber,\n  question,\n  answers,\n  isQuestionLoading,\n  onBackButtonClick,\n  onAnswerClick,\n  questionLoadingId,\n  correctAnswerId,\n  selectedAnswerId,\n  isNextButtonVisible,\n  onNextButtonClick,\n}: GamePageProps) => {\n  const RightContent: React.FC<CardTitleAddon> = (props: CardTitleAddon) => (\n    <View\n      style={{ display: \"flex\", flexDirection: \"row\", alignItems: \"center\" }}\n    >\n      <Button onPress={onBackButtonClick}>\n        <T message=\"Back\" />\n      </Button>\n    </View>\n  );\n\n  const handleQuestionSourceLinkClick = () => {\n    openLinkInNewTab(question!.url);\n  };\n\n  const handleAnswerSourceLinkClick = () => {\n    openLinkInNewTab(question!.answerUrl);\n  };\n\n  const [whatStart, whatEnd] = (question?.whatValue || \"\").split(\"{value}\");\n\n  return (\n    <ScrollView contentContainerStyle={styles.container}>\n      <Card style={styles.card}>\n        <SafeAreaView>\n          <Card.Title\n            title={\n              <>\n                <T message={\"Quiz question\"} />\n              </>\n            }\n            subtitle={\n              <>\n                {currentQuestionNumber} <T message=\"out of\" />{\" \"}\n                {totalQuestionsCount}\n              </>\n            }\n            left={LeftContent}\n            right={RightContent}\n          />\n\n          {isQuestionLoading ? <ProgressBar indeterminate /> : null}\n          {question ? (\n            <>\n              <View style={styles.coverContainer}>\n                <Card.Cover\n                  accessible={false}\n                  source={{\n                    uri: question.imgSrc,\n                  }}\n                />\n\n                {isNextButtonVisible ? (\n                  <View style={styles.coverButtonContainer}>\n                    <Button\n                      style={styles.nextQuestionButton}\n                      mode=\"contained\"\n                      onPress={onNextButtonClick}\n                    >\n                      <T message=\"Next question!\" />\n                    </Button>\n                    <View style={styles.sourceLinksContainer}>\n                      <Button\n                        labelStyle={styles.sourceLink}\n                        onPress={handleQuestionSourceLinkClick}\n                      >\n                        <T message=\"Question source\" />\n                      </Button>\n                      <Button\n                        labelStyle={styles.sourceLink}\n                        onPress={handleAnswerSourceLinkClick}\n                      >\n                        <T message=\"Answer source\" />\n                      </Button>\n                    </View>\n                  </View>\n                ) : null}\n              </View>\n              <Card.Content>\n                <Title style={styles.titleStatistics}>\n                  {question.whatStatistics}\n                </Title>\n                <Title style={styles.title}>\n                  {whatStart}\n                  <Text style={styles.titleValue}>{question.value}</Text>\n                  {whatEnd}.{\" \"}\n                  <T message=\"What else do you think may contain number\" />{\" \"}\n                  <Text style={styles.titleValue}>\n                    {question.value.toString()}\n                  </Text>\n                  ?\n                </Title>\n              </Card.Content>\n            </>\n          ) : null}\n          {answers ? (\n            <Card.Actions style={styles.buttonsContainer}>\n              {answers.map((a, i) => (\n                <GamePageAnswer\n                  key={a.id}\n                  index={i}\n                  onAnswerClick={onAnswerClick}\n                  isLoading={questionLoadingId === a.id}\n                  isAnyQuestionLoading={questionLoadingId !== undefined}\n                  isSelected={selectedAnswerId === a.id}\n                  isCorrectAnswer={a.id === correctAnswerId}\n                  isAnswerRevealed={isNextButtonVisible}\n                  {...a}\n                />\n              ))}\n            </Card.Actions>\n          ) : null}\n        </SafeAreaView>\n      </Card>\n    </ScrollView>\n  );\n};\n\ninterface GamePageProps {\n  currentQuestionNumber: number;\n  totalQuestionsCount: number;\n  isQuestionLoading: boolean;\n  questionLoadingId?: string;\n  correctAnswerId?: string;\n  selectedAnswerId?: string;\n  isNextButtonVisible: boolean;\n  question?: Question | null;\n  answers?: Answer[] | null;\n  onBackButtonClick: () => void;\n  onAnswerClick: (answerId: string) => void;\n  onNextButtonClick: () => void;\n}\n\nexport default GamePage;\n","import { StackNavigationProp } from \"@react-navigation/stack\";\nimport React, { useEffect, useState } from \"react\";\nimport { useSettings } from \"../../contexts/SettingsContext\";\nimport { QuestionWithAnswers, RootStackRoute, RootStackRoutes } from \"../types\";\nimport GamePage from \"./GamePage\";\nimport {\n  checkQuestion,\n  fetchQuestionByIndex,\n  QUESTIONS_COUNT,\n} from \"./GamePage.service\";\n\nconst GamePageContainer: React.FC<GamePageContainerProps> = ({\n  navigation,\n}: GamePageContainerProps) => {\n  const [currentQuestionNumber, setCurrentQuestionNumber] = useState<number>(0);\n  const [currentQuestion, setCurrentQuestion] = useState<\n    QuestionWithAnswers | undefined\n  >(undefined);\n  const [correctAnswerId, setCorrectAnswerId] = useState<string | undefined>(\n    undefined\n  );\n  const [selectedAnswerId, setSelectedAnswerId] = useState<\n    string | undefined\n  >();\n  const [isQuestionLoading, setIsQuestionLoading] = useState<boolean>(false);\n  const [stats, setStats] = useState<Stats>();\n  const { locale } = useSettings();\n\n  async function fetchData(questionNumber: number) {\n    setIsQuestionLoading(true);\n    const question = await fetchQuestionByIndex(questionNumber, locale);\n    setIsQuestionLoading(false);\n    setCurrentQuestion(question);\n  }\n\n  async function checkAnswer(selectedAnswerId: string) {\n    if (!currentQuestion) {\n      throw new Error(\"There is no current question\");\n    }\n    const { correctAnswerId } = await checkQuestion(currentQuestion.id);\n    setCorrectAnswerId(correctAnswerId);\n    setStats((stats) => {\n      const ended = [...(stats?.ended || [])];\n      const isCorrect = [...(stats?.isCorrect || [])];\n      ended[currentQuestionNumber] = Date.now();\n      isCorrect[currentQuestionNumber] = correctAnswerId === selectedAnswerId;\n      return { ...(stats || {}), ended, isCorrect };\n    });\n  }\n\n  useEffect(() => {\n    setStats((stats) => {\n      const started = [...(stats?.started || [])];\n      started[currentQuestionNumber] = Date.now();\n      return { ...(stats || {}), started };\n    });\n    fetchData(currentQuestionNumber);\n  }, [currentQuestionNumber]);\n\n  const handleLinkButtonClick = (routeName: RootStackRoute) => () => {\n    navigation.navigate(routeName);\n  };\n\n  const handleAnswerClick = (id: string) => {\n    setSelectedAnswerId(id);\n    checkAnswer(id);\n  };\n\n  const handleNextButtonClick = () => {\n    const nextQuestionNumber = currentQuestionNumber + 1;\n    if (nextQuestionNumber === QUESTIONS_COUNT) {\n      if (!stats) throw new Error(\"no stats\");\n      if (!stats.started) throw new Error(\"no stats for started\");\n      if (!stats.ended) throw new Error(\"no stats for ended\");\n      if (!stats.isCorrect) throw new Error(\"no stats from isCorrect\");\n      const gamePace = stats.started.map((started, index) => {\n        const ended = stats.ended![index];\n        return Math.round((ended - started) / 100) / 10;\n      });\n      navigation.navigate(\"GameOver\", {\n        gameResults: stats.isCorrect,\n        gamePace,\n      });\n      return;\n    }\n    setCorrectAnswerId(undefined);\n    setSelectedAnswerId(undefined);\n    setCurrentQuestion(undefined);\n    setCurrentQuestionNumber(nextQuestionNumber);\n  };\n\n  return (\n    <GamePage\n      currentQuestionNumber={currentQuestionNumber + 1}\n      isQuestionLoading={isQuestionLoading}\n      question={currentQuestion?.question}\n      answers={currentQuestion?.answers}\n      totalQuestionsCount={QUESTIONS_COUNT}\n      correctAnswerId={correctAnswerId}\n      onBackButtonClick={handleLinkButtonClick(\"Home\")}\n      onAnswerClick={handleAnswerClick}\n      selectedAnswerId={selectedAnswerId}\n      isNextButtonVisible={Boolean(correctAnswerId)}\n      onNextButtonClick={handleNextButtonClick}\n    />\n  );\n};\n\ninterface GamePageContainerProps {\n  navigation: StackNavigationProp<RootStackRoutes, \"Game\">;\n}\n\ninterface Stats {\n  started?: number[];\n  ended?: number[];\n  isCorrect?: boolean[];\n}\n\nexport default GamePageContainer;\n","import { StyleSheet } from \"react-native\";\n\nexport default StyleSheet.create({\n  container: {\n    alignSelf: \"center\",\n    minHeight: \"100%\",\n    minWidth: \"100%\",\n    padding: 20,\n    borderRadius: 0,\n  },\n  content: {\n    marginTop: 20,\n  },\n  switchContainer: {\n    flexDirection: \"row\",\n    justifyContent: \"space-between\",\n  },\n});\n","import { StackNavigationProp } from \"@react-navigation/stack\";\nimport React from \"react\";\nimport { Avatar, Button, Card } from \"react-native-paper\";\nimport { SafeAreaView } from \"react-native-safe-area-context\";\nimport { T } from \"react-targem\";\nimport ThemeToggler from \"../../components/ThemeToggler\";\nimport { RootStackRoute, RootStackRoutes } from \"../types\";\nimport styles from \"./Settings.styles\";\n\nconst LeftContent: React.FC<CardTitleAddon> = (props: CardTitleAddon) => (\n  <Avatar.Text {...props} label=\"S\" />\n);\n\ninterface CardTitleAddon {\n  size: number;\n}\n\nconst Settings: React.FC<SettingsProps> = ({ navigation }: SettingsProps) => {\n  const handleLinkButtonClick = (routeName: RootStackRoute) => () => {\n    navigation.navigate(routeName);\n  };\n\n  const RightAddon = () => (\n    <Button mode=\"outlined\" onPress={handleLinkButtonClick(\"Home\")}>\n      <T message=\"Home\" />\n    </Button>\n  );\n\n  return (\n    <Card style={styles.container}>\n      <SafeAreaView>\n        <Card.Title\n          title={<T message=\"Settings\" />}\n          left={LeftContent}\n          right={RightAddon}\n        />\n        <Card.Content style={styles.content}>\n          <ThemeToggler />\n        </Card.Content>\n      </SafeAreaView>\n    </Card>\n  );\n};\ninterface SettingsProps {\n  navigation: StackNavigationProp<RootStackRoutes, \"Settings\">;\n}\n\nexport default Settings;\n","import { createStackNavigator } from \"@react-navigation/stack\";\nimport React from \"react\";\nimport HomePage from \"./HomePage\";\nimport RulesPage from \"./RulesPage\";\nimport GameOverPage from \"./GameOverPage\";\nimport GamePage from \"./GamePage\";\nimport SettingsPage from \"./SettingsPage\";\n\nconst Stack = createStackNavigator();\n\nconst screenOptions = { animationEnabled: true };\n\nconst Pages: React.FC<HomePageProps> = () => {\n  return (\n    <Stack.Navigator headerMode=\"none\" initialRouteName=\"Home\">\n      <Stack.Screen options={screenOptions} name=\"Home\" component={HomePage} />\n      <Stack.Screen\n        options={screenOptions}\n        name=\"Rules\"\n        component={RulesPage}\n      />\n      <Stack.Screen\n        options={screenOptions}\n        name=\"GameOver\"\n        component={GameOverPage}\n      />\n      <Stack.Screen options={screenOptions} name=\"Game\" component={GamePage} />\n      <Stack.Screen\n        options={screenOptions}\n        name=\"Settings\"\n        component={SettingsPage}\n      />\n    </Stack.Navigator>\n  );\n};\ninterface HomePageProps {}\n\nexport default Pages;\n","import React from \"react\";\nimport AppLayout from \"./src/components/AppLayout\";\nimport Pages from \"./src/pages\";\n\nconst App: React.FC = () => {\n  return (\n    <AppLayout>\n      <Pages />\n    </AppLayout>\n  );\n};\n\nexport default App;\n"],"sourceRoot":""}