{"version":3,"sources":["src/pages/HomePage/assets/logo.png","src/config/themes.ts","src/config/locales.ts","src/utils/locales.ts","src/contexts/SettingsContext/SettingsContext.tsx","src/pages/GamePage/GamePage.service.ts","src/components/AppLayout/AppLayout.tsx","src/components/LocaleSelector/LocaleSelector.tsx","src/pages/HomePage/HomePage.styles.ts","src/pages/HomePage/HomePage.tsx","src/pages/RulesPage/RulesPage.styles.ts","src/pages/RulesPage/RulesPage.tsx","src/pages/GameOverPage/GameOverPage.styles.ts","src/pages/GameOverPage/GameOverPage.tsx","src/pages/GameOverPage/GameOverPage.container.tsx","src/pages/GamePage/GamePage.styles.ts","src/pages/GamePage/GamePageAnswer/GamePageAnswer.styles.ts","src/pages/GamePage/GamePageAnswer/GamePageAnswer.tsx","src/pages/GamePage/GamePage.tsx","src/pages/GamePage/GamePage.mock.ts","src/pages/GamePage/GamePageContainer.tsx","src/pages/SettingsPage/Settings.styles.ts","src/pages/SettingsPage/Settings.tsx","src/pages/index.tsx","App.tsx"],"names":["module","exports","defaultThemeName","Appearance","getColorScheme","locales","key","internationalName","localName","getBrowserLocale","supportedLocales","fallbackLocale","browserLocale","window","navigator","lang","language","locale","includes","localeToMatch","split","findLocale","questionsCache","getRandomName","min","max","names","require","length","Math","floor","random","getInitialValues","theme","map","l","nickName","SettingsContext","React","createContext","setSettings","resetSettings","SettingsContextProvider","props","settings","setState","state","newSettings","AsyncStorage","setItem","JSON","stringify","updateSettingsWithPersistedValue","a","async","getSettingsFromLocalStorage","json","getItem","parse","this","providerValue","Provider","value","children","PureComponent","useSettings","useContext","AppLayoutInternal","DarkTheme","DefaultTheme","NavigationContainer","translations","StatusBar","style","AppLayout","LocalSelector","buttonStyle","useState","visible","setVisible","closeMenu","Menu","onDismiss","anchor","Button","mode","onPress","message","Item","localeKey","title","StyleSheet","create","card","width","height","borderRadius","backgroundColor","position","cardContent","alignItems","display","justifyContent","cardImageContainer","elevation","buttonsContainer","marginTop","linearGradient","cardImage","cardTitle","marginBottom","color","cardButton","HomePage","navigation","handleLinkButtonClick","routeName","args","navigate","Card","styles","LinearGradient","colors","locations","Content","View","Image","source","logo","gameResults","Platform","OS","Linking","openURL","container","flex","minHeight","alignSelf","padding","content","header","fontSize","lineHeight","text","LeftContent","Text","label","RulesPage","ScrollView","contentContainerStyle","SafeAreaView","Title","left","right","Paragraph","flexWrap","button","paddingTop","paddingBottom","minWidth","GameOverPage","facebookShareMessage","facebookShareURL","userName","userStatus","rangCurrent","rangTotal","coins","pace","paceAvg","streaks","streaksMax","postOnFacebook","url","encodeURI","join","totalAnswered","correctAnswered","filter","Boolean","accuracy","round","rangStatus","paceStatus","subtitle","Cover","accessible","uri","ProgressBar","progress","Colors","red800","blue800","green800","GameOverPageContainer","route","params","overflow","coverContainer","coverButtonContainer","top","bottom","nextQuestionButton","paddingHorizontal","paddingVertical","textAlign","titleStatistics","fontStyle","sourceLinksContainer","paddingLeft","paddingRight","flexDirection","titleValue","fontWeight","maxWidth","buttonContent","statistics","successTheme","primary","warningTheme","GamePageAnswer","onAnswerClick","id","answerStatistics","answerValue","isLoading","isAnyQuestionLoading","isSelected","isCorrectAnswer","isAnswerRevealed","undefined","contentStyle","disabled","loading","GamePage","totalQuestionsCount","currentQuestionNumber","question","answers","isQuestionLoading","onBackButtonClick","questionLoadingId","correctAnswerId","selectedAnswerId","isNextButtonVisible","onNextButtonClick","whatValue","whatStart","whatEnd","indeterminate","imgSrc","accessibilityRole","target","href","answerUrl","whatStatistics","toString","Actions","MOCK","questions","transformQuestion","q","i","correctAnswerIndex","fetchQuestionByIndex","index","Promise","resolve","reject","setTimeout","checkQuestion","questionId","find","Error","GamePageContainer","setCurrentQuestionNumber","currentQuestion","setCurrentQuestion","setCorrectAnswerId","setSelectedAnswerId","setIsQuestionLoading","useEffect","questionNumber","fetchData","checkAnswer","nextQuestionNumber","switchContainer","Settings","t","useLocale","Switch","accessibilityLabel","onValueChange","isDark","Stack","createStackNavigator","screenOptions","animationEnabled","Pages","Navigator","headerMode","initialRouteName","Screen","options","name","component","SettingsPage","App"],"mappings":"i9LAAAA,EAAOC,QAAU,IAA0B,kC,2NCI9BC,EACqB,S,MAAhCC,EAAWC,iBAA8B,OAAS,UCLvCC,EAAU,CACrB,CACEC,IAAK,QACLC,kBAAmB,eACnBC,UAAW,gBAEb,CACEF,IAAK,QACLC,kBAAmB,eACnBC,UAAW,gBAEb,CACEF,IAAK,KACLC,kBAAmB,UACnBC,UAAW,8CAEb,CACEF,IAAK,KACLC,kBAAmB,SACnBC,UAAW,iB,q0BCAR,SAASC,EACdC,EACAC,GAEA,IAAIC,EACJ,GAAsB,qBAAXC,QAA0BA,OAAOC,UAAW,CACrD,IAAMC,EAAOF,OAAOC,UAAUE,SAC1BD,IACFH,EAvBC,SACLF,EACAO,GAEA,GAAIP,EAAiBQ,SAASD,GAC5B,OAAOA,EAET,cAA4BP,KAA5B,aAA8C,CAAC,IAApCS,EAAmC,QAC5C,GAAIA,EAAcD,SAASD,EAAOG,MAAM,KAAK,IAC3C,OAAOD,GAcSE,CAAWX,EAAkBK,IAIjD,OAAOH,GAAiBD,E,igCCzB1B,ICkCIW,ED5BEC,EAAgB,WAEpB,IANoBC,EAAaC,EAM3BC,EAAkBC,EAAQ,KAGhC,OADaD,GAROF,EAQY,EARCC,EAQEC,EAAME,OAAS,EAP3CJ,EAAMK,KAAKC,MAAMD,KAAKE,UAAYN,EAAMD,EAAM,OAsBjDQ,EAAmB,iBAAqC,CAC5DC,MAAO/B,EACPe,OAAQR,EACNJ,EAAQ6B,KAAI,SAACC,GAAD,OAAOA,EAAE7B,OACrBD,EAAQ,GAAGC,KAEb8B,SAAUb,MAGNc,EAAkBC,IAAMC,cAAN,OACnBP,KADmB,IAGtBQ,YAAa,aAEbC,cAAe,gBAGJC,EAAb,gCAIE,WAAYC,GAAkC,IAAD,sBAC3C,cAAMA,IAwBAH,YAAc,SAACI,GACrB,EAAKC,UAAS,SAACC,GACb,IAAMC,EAAW,OACZD,GACAF,GAGL,OADKI,IAAaC,QA7EE,WA6EyBC,KAAKC,UAAUJ,IACrDA,MAhCkC,EAoCrCK,iCAAmC,0BAAAC,EAAAC,OAAA,kEAAAD,EAAA,MACtB,EAAKE,+BADiB,OACnCC,EADmC,OAEzC,EAAKX,UAAS,SAACC,GAAD,cACTA,GACAU,MAJoC,6DApCE,EA4CrCD,4BAA8B,0BAAAF,EAAAC,OAAA,kEAAAD,EAAA,MAGjBL,IAAaS,QA7FV,aA0Fc,UAG9BD,EAH8B,gDAM3B,IAN2B,gCAS7BN,KAAKQ,MAAMF,IATkB,6DA5CO,EAwDrCf,cAAgB,WACtB,EAAKI,SAASb,MAvDd,EAAKc,MAAL,KACKd,KAEA,EAAKoB,mCALiC,EAJ/C,6CAYoC,IACxBN,EAAiBa,KAAjBb,MAAOH,EAAUgB,KAAVhB,MAETiB,EAAa,SACdd,GACAH,GAFc,IAGjBH,YAAamB,KAAKnB,YAClBC,cAAekB,KAAKlB,gBAGtB,OACE,kBAACJ,EAAgBwB,SAAjB,CAA0BC,MAAOF,GAC9BjB,EAAMoB,cAxBf,GAA6CzB,IAAM0B,eAiEtCC,EAAc,kBAAuBC,qBAAW7B,I,2BE9FvD8B,EAAsD,SAAC,GAE9B,IAD7BJ,EAC4B,EAD5BA,SAC4B,EACFE,IAAlBhD,EADoB,EACpBA,OAAQgB,EADY,EACZA,MAEhB,OACE,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAeA,MAAiB,SAAVA,EAAmBmC,IAAYC,KACnD,kBAACC,EAAA,EAAD,KACE,kBAAC,iBAAD,CAAgBrD,OAAQA,EAAQsD,aAAcA,GAC3CR,EACD,kBAACS,EAAA,UAAD,CAAWC,MAAM,cAiBdC,EAR6B,SAAC,GAAD,IAAGX,EAAH,EAAGA,SAAH,OAC1C,kBAAC,EAAD,KACE,kBAAC,EAAD,KAAoBA,K,sFCeTY,GAjDqC,SAAC,GAE1B,IADzBC,EACwB,EADxBA,YAEQpC,EAAgByB,IAAhBzB,YADgB,EASMF,IAAMuC,UAAS,GATrB,WASjBC,EATiB,KASRC,EATQ,KAWlBC,EAAY,kBAAMD,GAAW,IAEnC,OACE,kBAACE,GAAA,EAAD,CACEH,QAASA,EACTI,UAAWF,EACXG,OACE,kBAACC,EAAA,EAAD,CACEX,MAAOG,EACPS,KAAK,WACLpD,MAAOoC,IACPiB,QAZS,kBAAMP,GAAW,KAc1B,kBAAC,IAAD,CAAGQ,QAAQ,sBAIdlF,EAAQ6B,KAAI,SAACC,GAAD,OACX,kBAAC8C,GAAA,EAAKO,KAAN,CACElF,IAAK6B,EAAE7B,IACPgF,SA7BoBG,EA6BQtD,EAAE7B,IA7BY,WAChDkC,EAAY,CACVvB,OAAQwE,IAEVT,MA0BMU,MACE,oCACGvD,EAAE3B,UADL,KACkB2B,EAAE5B,kBADpB,OA/BiB,IAACkF,O,6BCTfE,QAAWC,OAAO,CAC/BC,KAAM,CACJC,MAAO,OACPC,OAAQ,OACRC,aAAc,EACdC,gBAAiB,UACjBC,SAAU,YAEZC,YAAa,CACXC,WAAY,SACZF,SAAU,WACVG,QAAS,OACTC,eAAgB,SAChBP,OAAQ,QAEVQ,mBAAoB,CAClBC,UAAW,EACXT,OAAQ,OACRG,SAAU,YAEZO,iBAAkB,CAChBC,UAAW,IACXN,WAAY,SACZF,SAAU,WACVG,QAAS,OACTC,eAAgB,SAChBP,OAAQ,QAEVY,eAAgB,CACdb,MAAO,OACPC,OAAQ,QAEVa,UAAW,CACTd,MAAO,IACPC,OAAQ,QAEVc,UAAW,CACTH,UAAW,GACXI,aAAc,GACdC,MAAO,QAETC,WAAY,CACVF,aAAc,M,UCkDHG,GAjF2B,SAAC,GAAmC,IAAjCC,EAAgC,EAAhCA,WACrCC,EAAwB,SAC5BC,EACAC,GAF4B,OAGzB,WACHH,EAAWI,SAASF,EAAWC,KAOjC,OACE,kBAACE,EAAA,EAAD,CAAM9C,MAAO+C,GAAO3B,MAClB,kBAAC4B,GAAA,EAAD,CAAgBC,OAAQ,CAAC,UAAW,UAAW,WAAYC,UAAW,CAAC,EAAG,IAAM,GAAIlD,MAAO+C,GAAOb,gBAChG,kBAACY,EAAA,EAAKK,QAAN,CAAcnD,MAAO+C,GAAOrB,aAC1B,kBAAC0B,EAAA,EAAD,CAAMpD,MAAO+C,GAAOjB,oBAClB,kBAACuB,EAAA,EAAD,CAAOC,OAAQC,KAAMvD,MAAO+C,GAAOZ,aAKrC,kBAACiB,EAAA,EAAD,CAAMpD,MAAO+C,GAAOf,kBAClB,kBAACrB,EAAA,EAAD,CACEC,KAAK,YACLpD,MAAOoC,IACPiB,QAAS6B,EAAsB,QAC/B1C,MAAO+C,GAAOR,YAEd,kBAAC,IAAD,CAAGzB,QAAQ,UAEb,kBAACH,EAAA,EAAD,CACEC,KAAK,WACLpD,MAAOoC,IACPiB,QAAS6B,EAAsB,SAC/B1C,MAAO+C,GAAOR,YAEd,kBAAC,IAAD,CAAGzB,QAAQ,WAEb,kBAACH,EAAA,EAAD,CACEC,KAAK,WACLpD,MAAOoC,IACPiB,QAAS6B,EAAsB,YAC/B1C,MAAO+C,GAAOR,YAEd,kBAAC,IAAD,CAAGzB,QAAQ,cAGb,kBAACH,EAAA,EAAD,CACEC,KAAK,WACLpD,MAAOoC,IACPiB,QAAS6B,EAAsB,WAAY,CACzCc,YAAa,EAAC,GAAM,GAAO,KAE7BxD,MAAO+C,GAAOR,YAEd,kBAAC,IAAD,CAAGzB,QAAQ,cAGI,QAAhB2C,IAASC,GACR,kBAAC/C,EAAA,EAAD,CACEC,KAAK,WACLpD,MAAOoC,IACPiB,QAvDoB,WAChC8C,IAAQC,QAXoB,2CAkEhB5D,MAAO+C,GAAOR,YAEd,kBAAC,IAAD,CAAGzB,QAAQ,qBAEX,KACJ,kBAAC,GAAD,CAAeX,YAAa4C,GAAOR,kB,uCChFhCrB,QAAWC,OAAO,CAC/B0C,UAAW,CACTC,KAAM,EACNjC,eAAgB,SAChBkC,UAAW,QAEb3C,KAAM,CACJ4C,UAAW,SACXD,UAAW,OACXE,QAAS,GACT1C,aAAc,GAEhB2C,QAAS,CACPjC,UAAW,IAEbkC,OAAQ,CACNC,SAAU,GACVC,WAAY,GACZhC,aAAc,GACdJ,UAAW,IAEbqC,KAAM,CACJF,SAAU,GACVC,WAAY,M,mBChBVE,GAAwC,SAACrG,GAAD,OAC5C,kBAAC,KAAOsG,KAAR,QAAiBtG,EAAjB,CAAwBuG,MAAM,QAkDjBC,GA3C6B,SAAC,GAEtB,IADrBjC,EACoB,EADpBA,WAYA,OACE,kBAACkC,GAAA,EAAD,CAAYC,sBAAuB7B,GAAOc,WACxC,kBAACf,EAAA,EAAD,CAAM9C,MAAO+C,GAAO3B,MAClB,kBAACyD,GAAA,EAAD,KACE,kBAAC/B,EAAA,EAAKgC,MAAN,CACE7D,MAAO,kBAAC,IAAD,CAAGH,QAAQ,UAClBiE,KAAMR,GACNS,MAbS,kBACjB,kBAACrE,EAAA,EAAD,CAAQC,KAAK,WAAWC,SALK8B,EAK0B,OALI,WAC3DF,EAAWI,SAASF,MAKlB,kBAAC,IAAD,CAAG7B,QAAQ,UANe,IAAC6B,KAmBvB,kBAACG,EAAA,EAAKK,QAAN,CAAcnD,MAAO+C,GAAOmB,SAC1B,kBAACe,GAAA,EAAD,CAAWjF,MAAO+C,GAAOuB,MACvB,kBAAC,IAAD,CAAGxD,QAAQ,yDAEb,kBAACmE,GAAA,EAAD,KACE,kBAAC,IAAD,CAAGnE,QAAQ,6DAEb,kBAACmE,GAAA,EAAD,KACE,kBAAC,IAAD,CAAGnE,QAAQ,0F,6BC7CVI,QAAWC,OAAO,CAC/BC,KAAM,CACJE,OAAQ,OACRD,MAAO,OACPE,aAAc,GAEhBS,iBAAkB,CAChBJ,QAAS,OACTsD,SAAU,OACVrD,eAAgB,UAElBsD,OAAQ,CACNlD,UAAW,GACXI,aAAc,GACd+C,WAAY,GACZC,cAAe,GACfC,SAAU,OAEZrE,MAAO,CACLgB,UAAW,GACXI,aAAc,KCdZkC,GAAwC,SAACrG,GAAD,OAC5C,kBAAC,KAAOsG,KAAR,QAAiBtG,EAAjB,CAAwBuG,MAAM,QA+FjBc,GAxFmC,SAAC,GAa5C,IAZLC,EAYI,EAZJA,qBACAC,EAWI,EAXJA,iBACAC,EAUI,EAVJA,SACAC,EASI,EATJA,WACAC,EAQI,EARJA,YACAC,EAOI,EAPJA,UACAC,EAMI,EANJA,MACAC,EAKI,EALJA,KACAC,EAII,EAJJA,QACAC,EAGI,EAHJA,QACAC,EAEI,EAFJA,WACA1C,EACI,EADJA,YAOM2C,EAAiB,WACrB,IAMMC,EAAG,8CANkB,CACzB,CAAC,IAAKX,GACN,CAAC,QAASD,IAET/H,KAAI,2BAAE5B,EAAF,KAAOwD,EAAP,YAAqBxD,EAArB,IAA4BwK,UAAUhH,MAC1CiH,KAAK,KAER3C,IAAQC,QAAQwC,IAEZG,EAAgB/C,EAAYrG,OAC5BqJ,EAAkBhD,EAAYiD,OAAOC,SAASvJ,OAC9CwJ,EAAWvJ,KAAKwJ,MAAO,IAAMJ,EAAmBD,GAAiB,IACjEM,EAAazJ,KAAKwJ,MAAO,IAAMhB,EAAeC,GAAa,IAC3DiB,EAAa1J,KAAKwJ,MAAO,IAAMb,EAAQC,GAAW,IACxD,OACE,kBAAClD,EAAA,EAAD,CAAM9C,MAAO+C,GAAO3B,MAClB,kBAAC0B,EAAA,EAAKgC,MAAN,CACE7D,MAAOyE,EACPqB,SAAU,kBAAC,IAAD,CAAGjG,QAAS6E,IACtBZ,KAAMR,GACNS,MA1ByC,kBAC7C,kBAACrE,EAAA,EAAD,CAAQE,QAASsF,GACf,kBAAC,IAAD,CAAGrF,QAAQ,cA0BX,kBAACgC,EAAA,EAAKkE,MAAN,CACEC,YAAY,EACZ3D,OAAQ,CAAE4D,IAAK,+CAEjB,kBAACpE,EAAA,EAAKK,QAAN,KACE,kBAAC2B,GAAA,EAAD,CAAO9E,MAAO+C,GAAO9B,OACnB,kBAAC,IAAD,CAAGH,QAAQ,eADb,KAGA,kBAAC0D,GAAA,EAAD,KACE,kBAAC,IAAD,CAAG1D,QAAQ,aADb,KACwC,IAAX6F,EAD7B,MACgDH,EADhD,IAEGD,EAFH,KAIA,kBAACY,GAAA,EAAD,CAAaC,SAAUT,EAAUrE,MAAO+E,KAAOC,SAC/C,6BACA,kBAAC9C,GAAA,EAAD,KACE,kBAAC,IAAD,CAAG1D,QAAQ,UADb,KAC0BgF,EAD1B,KACkC,kBAAC,IAAD,CAAGhF,QAAQ,SAD7C,KACyD8E,EADzD,IAEGC,EAFH,KAIA,kBAACsB,GAAA,EAAD,CAAaC,SAAUP,EAAYvE,MAAO+E,KAAOE,UACjD,6BACA,kBAAC/C,GAAA,EAAD,KACE,kBAAC,IAAD,CAAG1D,QAAQ,SADb,KACyBiF,EADzB,MACiC,kBAAC,IAAD,CAAGjF,QAAQ,YAD5C,KAC2DmF,EAD3D,IAEGC,EAFH,KAIA,kBAACiB,GAAA,EAAD,CAAaC,SAAUN,EAAYxE,MAAO+E,KAAOG,cCvC1CC,GAjCqD,SAAC,GAE9D,IACGjE,EADJ,EADJkE,MAASC,OAEDnE,YAEUkC,EAAalG,IAAvB7B,SAUFO,EAAQ,CACZsF,cACAgC,qBAX8BE,EAAN,sCAYxBD,iBApBqB,2CAqBrBC,WACAC,WAbiB,0BAcjBC,YAbkB,EAclBC,UAbgB,GAchBC,MAbY,KAcZC,KAbW,KAcXC,QAbc,GAcdC,QAbc,EAcdC,WAbiB,GAgBnB,OAAO,kBAAC,GAAiBhI,ICtCZgD,QAAWC,OAAO,CAC/BC,KAAM,CACJ2C,UAAW,OACX6D,SAAU,UACVvG,MAAO,OACPE,aAAc,GAEhBS,iBAAkB,CAChBJ,QAAS,OACTsD,SAAU,OACVrD,eAAgB,SAChBQ,aAAc,IAEhBwF,eAAgB,CACdpG,SAAU,YAEZqG,qBAAsB,CACpBrG,SAAU,WACVsG,IAAK,EACL/C,MAAO,EACPD,KAAM,EACNiD,OAAQ,EACRnG,eAAgB,SAChBF,WAAY,SACZH,gBAAiB,sBAEnByG,mBAAoB,CAClBC,kBAAmB,GACnBC,gBAAiB,IAEnBlH,MAAO,CACLgB,UAAW,EACXmG,UAAW,SACX/F,aAAc,GAEhBgG,gBAAiB,CACfpG,UAAW,GACXmC,SAAU,GACVgE,UAAW,SACXE,UAAW,SACXjG,aAAc,GAEhBkG,qBAAsB,CACpB9G,SAAU,WACVuG,OAAQ,EACRxG,gBAAiB,uBACjBD,aAAc,EACdiH,YAAa,GACbC,aAAc,GACd7G,QAAS,OACTC,eAAgB,WAChB6G,cAAe,MACf/G,WAAY,SACZU,aAAc,IAEhBsG,WAAY,CACVC,WAAY,OACZxE,SAAU,M,SCzDClD,QAAWC,OAAO,CAC/BgE,OAAQ,CACNlD,UAAW,GACXI,aAAc,GACdiD,SAAU,MACVuD,SAAU,QAEZC,cAAe,CACb/E,UAAW,IAEbgF,WAAY,CACVT,UAAW,UAEbjJ,MAAO,KCVH2J,GAAe,CACnB/F,OAAQ,CACNgG,QAAS,YAIPC,GAAe,CACnBjG,OAAQ,CACNgG,QAAS,YAkEEE,GA9DuC,SAAC,GAU3B,IAT1BC,EASyB,EATzBA,cACAC,EAQyB,EARzBA,GACAC,EAOyB,EAPzBA,iBACAC,EAMyB,EANzBA,YACAC,EAKyB,EALzBA,UACAC,EAIyB,EAJzBA,qBACAC,EAGyB,EAHzBA,WACAC,EAEyB,EAFzBA,gBACAC,EACyB,EADzBA,iBAkBA,OACE,kBAACjJ,EAAA,EAAD,CACEE,QAAU+I,OAAuCC,EAlB3B,WACxBT,EAAcC,IAkBZrJ,MAAO+C,GAAOoC,OACd2E,aAAc/G,GAAO+F,cACrBlI,KAAK,YACLmJ,SACEN,GACCG,IAAqBF,IAAeC,EAEvCK,QAASR,EACThM,OAtBsB,IAApBmM,EACKX,GAGJU,IAAcD,EAIZP,QAJP,GAoBGM,EAAY,KACX,oCACE,kBAAC,KAAD,CAAMxJ,MAAO+C,GAAO1D,OAAQkK,GAAoB,IAChD,kBAAC,KAAD,CAAMvJ,MAAO+C,GAAOgG,YAAaO,MC5CrC/E,GAAwC,SAACrG,GAAD,OAC5C,kBAAC,KAAOsG,KAAR,QAAiBtG,EAAjB,CAAwBuG,MAAM,QAoJjBwF,GA7I2B,SAAC,GAarB,IAZpBC,EAYmB,EAZnBA,oBACAC,EAWmB,EAXnBA,sBACAC,EAUmB,EAVnBA,SACAC,EASmB,EATnBA,QACAC,EAQmB,EARnBA,kBACAC,EAOmB,EAPnBA,kBACAnB,EAMmB,EANnBA,cACAoB,EAKmB,EALnBA,kBACAC,EAImB,EAJnBA,gBACAC,EAGmB,EAHnBA,iBACAC,EAEmB,EAFnBA,oBACAC,EACmB,EADnBA,kBACmB,IAOmB,MAARR,OAAA,EAAAA,EAAUS,YAAa,IAAIlO,MAAM,WAP5C,WAOZmO,EAPY,KAODC,EAPC,KASnB,OACE,kBAACpG,GAAA,EAAD,KACE,kBAAC7B,EAAA,EAAD,CAAM9C,MAAO+C,GAAO3B,MAClB,kBAACyD,GAAA,EAAD,KACE,kBAAC/B,EAAA,EAAKgC,MAAN,CACE7D,MACE,oCACE,kBAAC,IAAD,CAAGH,QAAS,mBAGhBiG,SACE,oCACGoD,EADH,IAC0B,kBAAC,IAAD,CAAGrJ,QAAQ,WAAY,IAC9CoJ,GAGLnF,KAAMR,GACNS,MAzBqC,SAAC9G,GAAD,OAC7C,kBAACyC,EAAA,EAAD,CAAQE,QAAS0J,GACf,kBAAC,IAAD,CAAGzJ,QAAQ,aA0BNwJ,EAAoB,kBAACnD,GAAA,EAAD,CAAa6D,eAAa,IAAM,KACpDZ,EACC,oCACE,kBAAChH,EAAA,EAAD,CAAMpD,MAAO+C,GAAO8E,gBAClB,kBAAC/E,EAAA,EAAKkE,MAAN,CACEC,YAAY,EACZ3D,OAAQ,CACN4D,IAAKkD,EAASa,UAIjBN,EACC,kBAACvH,EAAA,EAAD,CAAMpD,MAAO+C,GAAO+E,sBAClB,kBAACnH,EAAA,EAAD,CACEX,MAAO+C,GAAOkF,mBACdrH,KAAK,YACLC,QAAS+J,GAET,kBAAC,IAAD,CAAG9J,QAAQ,oBAEb,kBAACsC,EAAA,EAAD,CAAMpD,MAAO+C,GAAOwF,sBAClB,kBAAC5H,EAAA,EAAD,KACE,kBAAC6D,GAAA,EAAD,CACE0G,kBAAkB,OAClBC,OAAO,SACPC,KAAM,kBAAahB,OAAb,EAAaA,EAAUhE,MAE7B,kBAAC,IAAD,CAAGtF,QAAQ,sBAGf,kBAACH,EAAA,EAAD,KACE,kBAAC6D,GAAA,EAAD,CACE0G,kBAAkB,OAClBC,OAAO,SACPC,KAAM,kBAAahB,OAAb,EAAaA,EAAUiB,YAE7B,kBAAC,IAAD,CAAGvK,QAAQ,sBAKjB,MAEN,kBAACgC,EAAA,EAAKK,QAAN,KACE,kBAAC2B,GAAA,EAAD,CAAO9E,MAAO+C,GAAOsF,iBAClB+B,EAASkB,gBAEZ,kBAACxG,GAAA,EAAD,CAAO9E,MAAO+C,GAAO9B,OAClB6J,EACD,kBAACtG,GAAA,EAAD,CAAMxE,MAAO+C,GAAO4F,YAAayB,EAAS/K,OACzC0L,EAHH,IAGa,IACX,kBAAC,IAAD,CAAGjK,QAAQ,6CAA8C,IACzD,kBAAC0D,GAAA,EAAD,CAAMxE,MAAO+C,GAAO4F,YACjByB,EAAS/K,MAAMkM,YANpB,OAYF,KACHlB,EACC,kBAACvH,EAAA,EAAK0I,QAAN,CAAcxL,MAAO+C,GAAOf,kBACzBqI,EAAQ5M,KAAI,SAACmB,GAAD,OACX,kBAAC,GAAD,MACE/C,IAAK+C,EAAEyK,GACPE,YAAa3K,EAAE2K,YACfD,iBAAkB1K,EAAE0K,iBACpBF,cAAeA,EACfI,UAAWgB,IAAsB5L,EAAEyK,GACnCI,0BAA4CI,IAAtBW,EACtBd,WAAYgB,IAAqB9L,EAAEyK,GACnCM,gBAAiB/K,EAAEyK,KAAOoB,EAC1Bb,iBAAkBe,GACd/L,QAIR,SC9ID6M,GAAOvO,EAAQ,KAAoBwO,UdcnCC,GAAoB,SAC/BC,EACAC,GAEA,MAAO,CACLzB,SAAU,CACRkB,eAAgBM,EAAExB,SAASkB,eAC3BT,UAAWe,EAAExB,SAASS,UACtBxL,MAAOuM,EAAExB,SAAS/K,MAClB4L,OAAO,mDAAoDY,EAC3DpB,gBAAiBmB,EAAExB,SAAS0B,mBAAmBP,WAC/CnF,IAAKwF,EAAExB,SAAShE,IAChBiF,UAAWO,EAAExB,SAASiB,WAExBhC,GAAIwC,EAAEN,WACNlB,QAASuB,EAAEvB,QAAQ5M,KAAI,SAACmB,EAAGyK,GAAJ,MAAY,CACjCC,iBAAkB1K,EAAE0K,iBACpBC,YAAa3K,EAAE2K,YACfF,GAAIA,EAAGkC,iBASAQ,GAAuB,SAClCC,GADkC,SAAApN,EAAAC,OAAA,yEAG3B,IAAIoN,SAAQ,SAACC,EAASC,GACvBH,EARuB,EASzBG,EAAO,qBAGJtP,IACHA,EAAiB4O,GAAKhO,IAAIkO,KAE5BS,YAAW,WACTF,EAAQrP,EAAemP,MACtB,WAb6B,6DAkBvBK,GAAgB,SAC3BC,GAD2B,eAAA1N,EAAAC,OAAA,mDAGrBuL,EAAWvN,EAAe0P,MAAK,SAACX,GAAD,OAAOA,EAAEvC,KAAOiD,KAH1B,sBAKnB,IAAIE,MAAM,oBALS,gCAOpB,CACL/B,gBAAiBL,EAASA,SAASK,kBARV,6De4BdgC,GA9E6C,SAAC,GAE9B,IAD7BhK,EAC4B,EAD5BA,WAC4B,EAC8BrC,mBAAiB,GAD/C,WACrB+J,EADqB,KACEuC,EADF,OAEkBtM,wBAE5CyJ,GAJ0B,WAErB8C,EAFqB,KAEJC,EAFI,OAKkBxM,wBAC5CyJ,GAN0B,WAKrBY,EALqB,KAKJoC,EALI,OAQoBzM,qBARpB,WAQrBsK,EARqB,KAQHoC,EARG,OAWsB1M,oBAAkB,GAXxC,WAWrBkK,EAXqB,KAWFyC,EAXE,KA4B5BC,qBAAU,YAfV,SAAyBC,GAAzB,QAAArO,EAAAC,OAAA,uDACEkO,GAAqB,GADvB,WAAAnO,EAAA,MAEyBmN,GAAqBkB,IAF9C,OAEQ7C,EAFR,OAGE2C,GAAqB,GACrBH,EAAmBxC,GAJrB,4DAgBE8C,CAAU/C,KACT,CAACA,IAEJ,IAA+BxH,EAuB/B,OACE,kBAAC,GAAD,CACEwH,sBAAuBA,EAAwB,EAC/CG,kBAAmBA,EACnBF,SAAQ,MAAEuC,OAAF,EAAEA,EAAiBvC,SAC3BC,QAAO,MAAEsC,OAAF,EAAEA,EAAiBtC,QAC1BH,oBfnCyB,EeoCzBO,gBAAiBA,EACjBF,mBA/B2B5H,EA+Bc,OA/BgB,WAC3DF,EAAWI,SAASF,KA+BlByG,cA5BsB,SAACC,GACzByD,EAAoBzD,GAjBtB,qBAAAzK,EAAAC,OAAA,mDACO8N,EADP,sBAEU,IAAIH,MAAM,gCAFpB,yBAAA5N,EAAA,MAIoCyN,GAAcM,EAAgBtD,KAJlE,gBAIUoB,EAJV,EAIUA,gBACRoC,EAAmBpC,GALrB,4DAkBE0C,IA2BEzC,iBAAkBA,EAClBC,oBAAqBjE,QAAQ+D,GAC7BG,kBA1B0B,WAC5B,IAAMwC,EAAqBjD,EAAwB,EfhBxB,IeiBvBiD,GAMJP,OAAmBhD,GACnBiD,OAAoBjD,GACpB+C,OAAmB/C,GACnB6C,EAAyBU,IARvB3K,EAAWI,SAAS,WAAY,CAC9BW,YAAa,EAAC,GAAM,GAAO,GAAM,GAAO,GAAO,S,UCvDxCtC,QAAWC,OAAO,CAC/B0C,UAAW,CACTG,UAAW,SACXD,UAAW,OACXuB,SAAU,OACVrB,QAAS,GACT1C,aAAc,GAEhB2C,QAAS,CACPjC,UAAW,IAEboL,gBAAiB,CACf3E,cAAe,MACf7G,eAAgB,mBCLd0C,GAAwC,SAACrG,GAAD,OAC5C,kBAAC,KAAOsG,KAAR,QAAiBtG,EAAjB,CAAwBuG,MAAM,QAoDjB6I,GA7C2B,SAAC,GAAmC,IAAjC7K,EAAgC,EAAhCA,WAAgC,EAC5CjD,IAAvBhC,EADmE,EACnEA,MAAOO,EAD4D,EAC5DA,YAePwP,EAAMC,sBAAND,EAER,OACE,kBAACzK,EAAA,EAAD,CAAM9C,MAAO+C,GAAOc,WAClB,kBAACgB,GAAA,EAAD,KACE,kBAAC/B,EAAA,EAAKgC,MAAN,CACE7D,MAAO,kBAAC,IAAD,CAAGH,QAAQ,UAClBiE,KAAMR,GACNS,MAdW,kBACjB,kBAACrE,EAAA,EAAD,CAAQC,KAAK,WAAWC,SALK8B,EAK0B,OALI,WAC3DF,EAAWI,SAASF,MAKlB,kBAAC,IAAD,CAAG7B,QAAQ,UANe,IAAC6B,KAoBzB,kBAACG,EAAA,EAAKK,QAAN,CAAcnD,MAAO+C,GAAOmB,SAC1B,kBAACd,EAAA,EAAD,CAAMpD,MAAO+C,GAAOsK,iBAClB,kBAACpI,GAAA,EAAD,uBACA,kBAACwI,GAAA,EAAD,CACEvC,kBAAkB,SAClBwC,mBAAoBH,EAAE,qBACtBlO,MAAiB,SAAV7B,EACPmQ,cA/Bc,SAACC,GACzB7P,EAAY,CAAEP,MAAOoQ,EAAS,OAAS,oBCbrCC,GAAQC,cAERC,GAAgB,CAAEC,kBAAkB,GA2B3BC,GAzBwB,WACrC,OACE,kBAACJ,GAAMK,UAAP,CAAiBC,WAAW,OAAOC,iBAAiB,QAClD,kBAACP,GAAMQ,OAAP,CAAcC,QAASP,GAAeQ,KAAK,OAAOC,UAAWhM,KAC7D,kBAACqL,GAAMQ,OAAP,CACEC,QAASP,GACTQ,KAAK,QACLC,UAAW9J,KAEb,kBAACmJ,GAAMQ,OAAP,CACEC,QAASP,GACTQ,KAAK,WACLC,UAAWjJ,KAEb,kBAACsI,GAAMQ,OAAP,CAAcC,QAASP,GAAeQ,KAAK,OAAOC,UAAWvE,KAC7D,kBAAC4D,GAAMQ,OAAP,CACEC,QAASP,GACTQ,KAAK,WACLC,UAAWC,OClBJC,IARO,WACpB,OACE,kBAAC,EAAD,KACE,kBAAC,GAAD,S","file":"static/js/app.08a3face.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.d5818779.png\";","import { Appearance } from \"react-native\";\n\nexport const themes = [\"default\", \"dark\"] as const;\n\nexport const defaultThemeName: ThemeName =\n  Appearance.getColorScheme() === \"dark\" ? \"dark\" : \"default\";\n\nexport type ThemeName = typeof themes[number];\n","export const locales = [\n  {\n    key: \"en-GB\",\n    internationalName: \"English (GB)\",\n    localName: \"English (GB)\",\n  },\n  {\n    key: \"en-US\",\n    internationalName: \"English (US)\",\n    localName: \"English (US)\",\n  },\n  {\n    key: \"ru\",\n    internationalName: \"Russian\",\n    localName: \"Русский\",\n  },\n  {\n    key: \"fr\",\n    internationalName: \"French\",\n    localName: \"Française\",\n  },\n] as const;\n\nexport type Locale = typeof locales[number][\"key\"];\n","// Originally taken from https://github.com/trucknet-io/react-targem/blob/develop/src/utils/locale.ts\n\nimport { Locale } from \"src/config/locales\";\n\nexport function findLocale(\n  supportedLocales: Locale[],\n  locale: string\n): Locale | undefined {\n  if (supportedLocales.includes(locale as Locale)) {\n    return locale as Locale;\n  }\n  for (const localeToMatch of supportedLocales) {\n    if (localeToMatch.includes(locale.split(\"-\")[0])) {\n      return localeToMatch;\n    }\n  }\n  return undefined;\n}\n\nexport function getBrowserLocale(\n  supportedLocales: Locale[],\n  fallbackLocale: Locale\n): Locale {\n  let browserLocale: Locale | undefined;\n  if (typeof window !== \"undefined\" && window.navigator) {\n    const lang = window.navigator.language;\n    if (lang) {\n      browserLocale = findLocale(supportedLocales, lang);\n    }\n  }\n\n  return browserLocale || fallbackLocale;\n}\n","import React, { useContext } from \"react\";\nimport { defaultThemeName, ThemeName } from \"src/config/themes\";\nimport { Locale, locales } from \"src/config/locales\";\nimport { getBrowserLocale } from \"src/utils/locales\";\nimport AsyncStorage from \"@react-native-community/async-storage\";\n\nconst LOCAL_STORAGE_KEY = \"settings\";\n\nconst getRandomInt = (min: number, max: number) => {\n  return min + Math.floor(Math.random() * (max - min + 1));\n};\n\nconst getRandomName = () => {\n  // eslint-disable-next-line @typescript-eslint/no-var-requires\n  const names: string[] = require(\"./names.json\");\n\n  const name = names[getRandomInt(0, names.length - 1)];\n  return name;\n};\n\ninterface SettingsContextProviderState {\n  locale: Locale;\n  theme: ThemeName;\n  nickName: string;\n}\n\nexport interface SettingsContext extends SettingsContextProviderState {\n  setSettings: (state: Partial<SettingsContextProviderState>) => void;\n  resetSettings: () => void;\n}\n\nconst getInitialValues = (): SettingsContextProviderState => ({\n  theme: defaultThemeName,\n  locale: getBrowserLocale(\n    locales.map((l) => l.key),\n    locales[0].key\n  ),\n  nickName: getRandomName(),\n});\n\nconst SettingsContext = React.createContext<SettingsContext>({\n  ...getInitialValues(),\n  // eslint-disable-next-line @typescript-eslint/no-empty-function\n  setSettings: () => {},\n  // eslint-disable-next-line @typescript-eslint/no-empty-function\n  resetSettings: () => {},\n});\n\nexport class SettingsContextProvider extends React.PureComponent<\n  Partial<SettingsContextProviderState>,\n  SettingsContextProviderState\n> {\n  constructor(props: Partial<SettingsContext>) {\n    super(props);\n    this.state = {\n      ...getInitialValues(),\n    };\n    void this.updateSettingsWithPersistedValue();\n  }\n\n  public render(): React.ReactNode {\n    const { state, props } = this;\n\n    const providerValue = {\n      ...state,\n      ...props,\n      setSettings: this.setSettings,\n      resetSettings: this.resetSettings,\n    };\n\n    return (\n      <SettingsContext.Provider value={providerValue}>\n        {props.children}\n      </SettingsContext.Provider>\n    );\n  }\n\n  private setSettings = (settings: Partial<SettingsContextProviderState>) => {\n    this.setState((state: SettingsContextProviderState) => {\n      const newSettings = {\n        ...state,\n        ...settings,\n      };\n      void AsyncStorage.setItem(LOCAL_STORAGE_KEY, JSON.stringify(newSettings));\n      return newSettings;\n    });\n  };\n\n  private updateSettingsWithPersistedValue = async (): Promise<void> => {\n    const json = await this.getSettingsFromLocalStorage();\n    this.setState((state) => ({\n      ...state,\n      ...json,\n    }));\n  };\n\n  private getSettingsFromLocalStorage = async (): Promise<\n    Partial<SettingsContextProviderState>\n  > => {\n    const json = await AsyncStorage.getItem(LOCAL_STORAGE_KEY);\n\n    if (!json) {\n      return {};\n    }\n\n    return JSON.parse(json);\n  };\n\n  private resetSettings = () => {\n    this.setState(getInitialValues());\n  };\n}\n\nexport const useSettings = (): SettingsContext => useContext(SettingsContext);\n","import { QuestionWithAnswers } from \"../types\";\nimport { MOCK } from \"./GamePage.mock\";\n\ninterface BackendQuestion {\n  question: {\n    whatStatistics: string;\n    whatValue: string;\n    value: number;\n    correctAnswerIndex: number;\n    url: string;\n    answerUrl: string;\n  };\n  answers: { answerStatistics: string; answerValue: string }[];\n}\n\nexport const transformQuestion = (\n  q: BackendQuestion,\n  i: number\n): QuestionWithAnswers => {\n  return {\n    question: {\n      whatStatistics: q.question.whatStatistics,\n      whatValue: q.question.whatValue,\n      value: q.question.value,\n      imgSrc: `https://source.unsplash.com/random?quiz&version=${i}`,\n      correctAnswerId: q.question.correctAnswerIndex.toString(),\n      url: q.question.url,\n      answerUrl: q.question.answerUrl,\n    },\n    id: i.toString(),\n    answers: q.answers.map((a, id) => ({\n      answerStatistics: a.answerStatistics,\n      answerValue: a.answerValue,\n      id: id.toString(),\n    })),\n  };\n};\n\nexport const QUESTIONS_COUNT = 5;\n\nlet questionsCache: QuestionWithAnswers[];\n\nexport const fetchQuestionByIndex = async (\n  index: number\n): Promise<QuestionWithAnswers> => {\n  return new Promise((resolve, reject) => {\n    if (index > QUESTIONS_COUNT) {\n      reject(\"No such question\");\n      return;\n    }\n    if (!questionsCache) {\n      questionsCache = MOCK.map(transformQuestion);\n    }\n    setTimeout(() => {\n      resolve(questionsCache[index]);\n    }, 1500);\n  });\n};\n\n// eslint-disable-next-line\nexport const checkQuestion = async (\n  questionId: string\n): Promise<{ correctAnswerId: string }> => {\n  const question = questionsCache.find((q) => q.id === questionId);\n  if (!question) {\n    throw new Error(\"No such question\");\n  }\n  return {\n    correctAnswerId: question.question.correctAnswerId,\n  };\n};\n","import { StatusBar } from \"expo-status-bar\";\nimport React from \"react\";\nimport { TargemProvider } from \"react-targem\";\n// eslint-disable-next-line @typescript-eslint/ban-ts-comment\n// @ts-ignore\nimport translations from \"src/i18n/translations.json\";\nimport {\n  Provider as PaperProvider,\n  DarkTheme,\n  DefaultTheme,\n} from \"react-native-paper\";\nimport {\n  SettingsContextProvider,\n  useSettings,\n} from \"src/contexts/SettingsContext\";\nimport \"react-native-gesture-handler\";\nimport { NavigationContainer } from \"@react-navigation/native\";\nimport { SafeAreaProvider } from \"react-native-safe-area-context\";\n\nconst AppLayoutInternal: React.FC<AppLayoutInternalProps> = ({\n  children,\n}: AppLayoutInternalProps) => {\n  const { locale, theme } = useSettings();\n\n  return (\n    <SafeAreaProvider>\n      <PaperProvider theme={theme === \"dark\" ? DarkTheme : DefaultTheme}>\n        <NavigationContainer>\n          <TargemProvider locale={locale} translations={translations}>\n            {children}\n            <StatusBar style=\"auto\" />\n          </TargemProvider>\n        </NavigationContainer>\n      </PaperProvider>\n    </SafeAreaProvider>\n  );\n};\ninterface AppLayoutInternalProps extends React.PropsWithChildren<{}> {}\n\nconst AppLayout: React.FC<AppLayoutProps> = ({ children }: AppLayoutProps) => (\n  <SettingsContextProvider>\n    <AppLayoutInternal>{children}</AppLayoutInternal>\n  </SettingsContextProvider>\n);\n\ninterface AppLayoutProps extends React.PropsWithChildren<{}> {}\n\nexport default AppLayout;\n","import React from \"react\";\nimport { locales, Locale } from \"src/config/locales\";\nimport { useSettings } from \"src/contexts/SettingsContext\";\nimport { Button, DefaultTheme, Menu } from \"react-native-paper\";\nimport { StyleProp, ViewStyle } from \"react-native\";\nimport { T } from \"react-targem\";\n\nconst LocalSelector: React.FC<LocalSelectorProps> = ({\n  buttonStyle,\n}: LocalSelectorProps) => {\n  const { setSettings } = useSettings();\n  const handleLocaleChange = (localeKey: Locale) => () => {\n    setSettings({\n      locale: localeKey,\n    });\n    closeMenu();\n  };\n\n  const [visible, setVisible] = React.useState(false);\n  const openMenu = () => setVisible(true);\n  const closeMenu = () => setVisible(false);\n\n  return (\n    <Menu\n      visible={visible}\n      onDismiss={closeMenu}\n      anchor={\n        <Button\n          style={buttonStyle}\n          mode=\"outlined\"\n          theme={DefaultTheme}\n          onPress={openMenu}\n        >\n          <T message=\"Choose language\" />\n        </Button>\n      }\n    >\n      {locales.map((l) => (\n        <Menu.Item\n          key={l.key}\n          onPress={handleLocaleChange(l.key)}\n          title={\n            <>\n              {l.localName} ({l.internationalName})\n            </>\n          }\n        />\n      ))}\n    </Menu>\n  );\n};\n\ninterface LocalSelectorProps {\n  buttonStyle: StyleProp<ViewStyle>;\n}\n\nexport default LocalSelector;\n","import { StyleSheet } from \"react-native\";\n\nexport default StyleSheet.create({\n  card: {\n    width: \"100%\",\n    height: \"100%\",\n    borderRadius: 0,\n    backgroundColor: \"#625772\",\n    position: \"relative\",\n  },\n  cardContent: {\n    alignItems: \"center\",\n    position: \"relative\",\n    display: \"flex\",\n    justifyContent: \"center\",\n    height: \"100%\",\n  },\n  cardImageContainer: {\n    elevation: 8,\n    height: \"100%\",\n    position: \"absolute\",\n  },\n  buttonsContainer: {\n    marginTop: 200,\n    alignItems: \"center\",\n    position: \"relative\",\n    display: \"flex\",\n    justifyContent: \"center\",\n    height: \"100%\",\n  },\n  linearGradient: {\n    width: \"100%\",\n    height: \"100%\",\n  },\n  cardImage: {\n    width: 370,\n    height: \"100%\",\n  },\n  cardTitle: {\n    marginTop: 64,\n    marginBottom: 64,\n    color: \"#fff\",\n  },\n  cardButton: {\n    marginBottom: 20,\n  },\n});\n","import { StackNavigationProp } from \"@react-navigation/stack\";\nimport React from \"react\";\nimport { Image, View, Platform, Linking } from \"react-native\";\nimport { Button, Card, DefaultTheme, Title } from \"react-native-paper\";\nimport { T } from \"react-targem\";\nimport LocalSelector from \"src/components/LocaleSelector\";\nimport { RootStackRoute, RootStackRoutes } from \"../types\";\nimport logo from \"./assets/logo.png\";\nimport styles from \"./HomePage.styles\";\nimport { LinearGradient } from \"expo-linear-gradient\";\n\nconst MOBILE_APPLICATION_LINK = \"https://expo.io/@ohm-team/lquiz-client\";\n\nconst HomePage: React.FC<HomePageProps> = ({ navigation }: HomePageProps) => {\n  const handleLinkButtonClick = (\n    routeName: RootStackRoute,\n    args?: any,\n  ) => () => {\n    navigation.navigate(routeName, args);\n  };\n\n  const handleDownloadButtonClick = () => {\n    Linking.openURL(MOBILE_APPLICATION_LINK);\n  };\n\n  return (\n    <Card style={styles.card}>\n      <LinearGradient colors={[\"#625772\", \"#9585ae\", \"#322c3c\"]} locations={[0, 0.18, 1]} style={styles.linearGradient}>\n        <Card.Content style={styles.cardContent}>\n          <View style={styles.cardImageContainer}>\n            <Image source={logo} style={styles.cardImage}/>\n          </View>\n          {/*<Title style={styles.cardTitle}>*/}\n          {/*  <T message=\"Letz quiz!\"/>*/}\n          {/*</Title>*/}\n          <View style={styles.buttonsContainer}>\n            <Button\n              mode=\"contained\"\n              theme={DefaultTheme}\n              onPress={handleLinkButtonClick(\"Game\")}\n              style={styles.cardButton}\n            >\n              <T message=\"Play\"/>\n            </Button>\n            <Button\n              mode=\"outlined\"\n              theme={DefaultTheme}\n              onPress={handleLinkButtonClick(\"Rules\")}\n              style={styles.cardButton}\n            >\n              <T message=\"Rules\"/>\n            </Button>\n            <Button\n              mode=\"outlined\"\n              theme={DefaultTheme}\n              onPress={handleLinkButtonClick(\"Settings\")}\n              style={styles.cardButton}\n            >\n              <T message=\"Settings\"/>\n            </Button>\n\n            <Button\n              mode=\"outlined\"\n              theme={DefaultTheme}\n              onPress={handleLinkButtonClick(\"GameOver\", {\n                gameResults: [true, false, true],\n              })}\n              style={styles.cardButton}\n            >\n              <T message=\"GameOver\"/>\n            </Button>\n\n            {Platform.OS === \"web\" ? (\n              <Button\n                mode=\"outlined\"\n                theme={DefaultTheme}\n                onPress={handleDownloadButtonClick}\n                style={styles.cardButton}\n              >\n                <T message=\"Download an app\"/>\n              </Button>\n            ) : null}\n            <LocalSelector buttonStyle={styles.cardButton}/>\n          </View>\n        </Card.Content>\n      </LinearGradient>\n    </Card>\n  );\n};\n\ninterface HomePageProps {\n  navigation: StackNavigationProp<RootStackRoutes, \"Home\">;\n}\n\nexport default HomePage;\n","import { StyleSheet } from \"react-native\";\n\nexport default StyleSheet.create({\n  container: {\n    flex: 1,\n    justifyContent: \"center\",\n    minHeight: \"100%\",\n  },\n  card: {\n    alignSelf: \"center\",\n    minHeight: \"100%\",\n    padding: 20,\n    borderRadius: 0,\n  },\n  content: {\n    marginTop: 20,\n  },\n  header: {\n    fontSize: 30,\n    lineHeight: 30,\n    marginBottom: 20,\n    marginTop: 20,\n  },\n  text: {\n    fontSize: 15,\n    lineHeight: 20,\n  },\n});\n","import { StackNavigationProp } from \"@react-navigation/stack\";\nimport React from \"react\";\nimport { Button, Card, Paragraph, Avatar } from \"react-native-paper\";\nimport { T } from \"react-targem\";\nimport { RootStackRoute, RootStackRoutes } from \"../types\";\nimport styles from \"./RulesPage.styles\";\nimport { SafeAreaView } from \"react-native-safe-area-context\";\nimport { ScrollView } from \"react-native\";\n\nconst LeftContent: React.FC<CardTitleAddon> = (props: CardTitleAddon) => (\n  <Avatar.Text {...props} label=\"R\" />\n);\n\ninterface CardTitleAddon {\n  size: number;\n}\n\nconst RulesPage: React.FC<RulesPageProps> = ({\n  navigation,\n}: RulesPageProps) => {\n  const handleLinkButtonClick = (routeName: RootStackRoute) => () => {\n    navigation.navigate(routeName);\n  };\n\n  const RightAddon = () => (\n    <Button mode=\"outlined\" onPress={handleLinkButtonClick(\"Home\")}>\n      <T message=\"Home\" />\n    </Button>\n  );\n\n  return (\n    <ScrollView contentContainerStyle={styles.container}>\n      <Card style={styles.card}>\n        <SafeAreaView>\n          <Card.Title\n            title={<T message=\"Rules\" />}\n            left={LeftContent}\n            right={RightAddon}\n          />\n          <Card.Content style={styles.content}>\n            <Paragraph style={styles.text}>\n              <T message=\"Within one game, the user is assigned 15 questions.\" />\n            </Paragraph>\n            <Paragraph>\n              <T message=\"Points are awarded for each correct answer (quiz coins)\" />\n            </Paragraph>\n            <Paragraph>\n              <T message=\"After passing all the questions, the general stratistics of the user is formed.\" />\n            </Paragraph>\n          </Card.Content>\n        </SafeAreaView>\n      </Card>\n    </ScrollView>\n  );\n};\n\ninterface RulesPageProps {\n  navigation: StackNavigationProp<RootStackRoutes, \"Rules\">;\n}\n\nexport default RulesPage;\n","import { StyleSheet } from \"react-native\";\n\nexport default StyleSheet.create({\n  card: {\n    height: \"100%\",\n    width: \"100%\",\n    borderRadius: 0,\n  },\n  buttonsContainer: {\n    display: \"flex\",\n    flexWrap: \"wrap\",\n    justifyContent: \"center\",\n  },\n  button: {\n    marginTop: 16,\n    marginBottom: 16,\n    paddingTop: 16,\n    paddingBottom: 16,\n    minWidth: \"90%\",\n  },\n  title: {\n    marginTop: 32,\n    marginBottom: 8,\n  },\n});\n","/* eslint-disable react/prop-types */\nimport React from \"react\";\nimport { T } from \"react-targem\";\nimport { Button, Card, Title, Avatar, Text } from \"react-native-paper\";\nimport { ProgressBar, Colors } from \"react-native-paper\";\nimport { Linking } from \"react-native\";\nimport styles from \"./GameOverPage.styles\";\n\nconst LeftContent: React.FC<CardTitleAddon> = (props: CardTitleAddon) => (\n  <Avatar.Text {...props} label=\"Q\" />\n);\n\ninterface CardTitleAddon {\n  size: number;\n}\n\nconst GameOverPage: React.FC<GameOverPageProps> = ({\n  facebookShareMessage,\n  facebookShareURL,\n  userName,\n  userStatus,\n  rangCurrent,\n  rangTotal,\n  coins,\n  pace,\n  paceAvg,\n  streaks,\n  streaksMax,\n  gameResults,\n}) => {\n  const RightContent: React.FC<CardTitleAddon> = () => (\n    <Button onPress={postOnFacebook}>\n      <T message=\"Share\" />\n    </Button>\n  );\n  const postOnFacebook = () => {\n    const facebookParameters = [\n      [\"u\", facebookShareURL],\n      [\"quote\", facebookShareMessage],\n    ]\n      .map(([key, value]) => `${key}=${encodeURI(value)}`)\n      .join(\"&\");\n    const url = `https://www.facebook.com/sharer/sharer.php?${facebookParameters}`;\n    Linking.openURL(url);\n  };\n  const totalAnswered = gameResults.length;\n  const correctAnswered = gameResults.filter(Boolean).length;\n  const accuracy = Math.round((100 * correctAnswered) / totalAnswered) / 100;\n  const rangStatus = Math.round((100 * rangCurrent) / rangTotal) / 100;\n  const paceStatus = Math.round((100 * pace) / paceAvg) / 100;\n  return (\n    <Card style={styles.card}>\n      <Card.Title\n        title={userName}\n        subtitle={<T message={userStatus} />}\n        left={LeftContent}\n        right={RightContent}\n      />\n      <Card.Cover\n        accessible={false}\n        source={{ uri: \"https://source.unsplash.com/random?finish\" }}\n      />\n      <Card.Content>\n        <Title style={styles.title}>\n          <T message=\"Statistics\" />:\n        </Title>\n        <Text>\n          <T message=\"accuracy\" />: {accuracy * 100}% ({correctAnswered}/\n          {totalAnswered})\n        </Text>\n        <ProgressBar progress={accuracy} color={Colors.red800} />\n        <br />\n        <Text>\n          <T message=\"coins\" />: {coins} (<T message=\"rang\" />: {rangCurrent}/\n          {rangTotal})\n        </Text>\n        <ProgressBar progress={rangStatus} color={Colors.blue800} />\n        <br />\n        <Text>\n          <T message=\"pace\" />: {pace}m (<T message=\"streaks\" />: {streaks}/\n          {streaksMax})\n        </Text>\n        <ProgressBar progress={paceStatus} color={Colors.green800} />\n      </Card.Content>\n    </Card>\n  );\n};\n\ninterface GameOverPageProps {\n  facebookShareMessage: string;\n  facebookShareURL: string;\n  userName: string;\n  /** статус присваиваемый пользователю по результатам конкретного опроса */\n  userStatus: string;\n  rangCurrent: number;\n  rangTotal: number;\n  coins: number;\n  pace: number;\n  paceAvg: number;\n  streaks: number;\n  streaksMax: number;\n  gameResults: boolean[];\n}\n\nexport default GameOverPage;\n","/* eslint-disable react/prop-types */\nimport React from \"react\";\nimport { StackNavigationProp } from \"@react-navigation/stack\";\nimport { RouteProp } from \"@react-navigation/native\";\nimport { useSettings } from \"src/contexts/SettingsContext\";\nimport GameOverPage from \"./GameOverPage\";\nimport { RootStackRoutes } from \"../types\";\n\nconst facebookShareURL = \"https://ohm-team.github.io/lquiz-client/\";\n\nconst GameOverPageContainer: React.FC<GameOverPageContainerProps> = ({\n  route: { params },\n}) => {\n  const { gameResults } = params;\n\n  const { nickName: userName } = useSettings();\n  const facebookShareMessage = `${userName} passeed the quiz with great result`;\n  const userStatus = \"Artificial intelligence\";\n  const rangCurrent = 1;\n  const rangTotal = 10;\n  const coins = 3210;\n  const pace = 16.9;\n  const paceAvg = 20;\n  const streaks = 2;\n  const streaksMax = 3;\n  const props = {\n    gameResults,\n    facebookShareMessage,\n    facebookShareURL,\n    userName,\n    userStatus,\n    rangCurrent,\n    rangTotal,\n    coins,\n    pace,\n    paceAvg,\n    streaks,\n    streaksMax,\n  };\n\n  return <GameOverPage {...props} />;\n};\n\nexport default GameOverPageContainer;\n\ninterface GameOverPageContainerProps {\n  navigation: StackNavigationProp<RootStackRoutes, \"GameOver\">;\n  route: RouteProp<RootStackRoutes, \"GameOver\">;\n}\n","import { StyleSheet } from \"react-native\";\n\nexport default StyleSheet.create({\n  card: {\n    minHeight: \"100%\",\n    overflow: \"visible\",\n    width: \"100%\",\n    borderRadius: 0,\n  },\n  buttonsContainer: {\n    display: \"flex\",\n    flexWrap: \"wrap\",\n    justifyContent: \"center\",\n    marginBottom: 32,\n  },\n  coverContainer: {\n    position: \"relative\",\n  },\n  coverButtonContainer: {\n    position: \"absolute\",\n    top: 0,\n    right: 0,\n    left: 0,\n    bottom: 0,\n    justifyContent: \"center\",\n    alignItems: \"center\",\n    backgroundColor: \"rgba(0, 0, 0, 0.7)\",\n  },\n  nextQuestionButton: {\n    paddingHorizontal: 20,\n    paddingVertical: 10,\n  },\n  title: {\n    marginTop: 5,\n    textAlign: \"center\",\n    marginBottom: 0,\n  },\n  titleStatistics: {\n    marginTop: 16,\n    fontSize: 15,\n    textAlign: \"center\",\n    fontStyle: \"italic\",\n    marginBottom: 0,\n  },\n  sourceLinksContainer: {\n    position: \"absolute\",\n    bottom: 0,\n    backgroundColor: \"rgba(255,255,255,.7)\",\n    borderRadius: 5,\n    paddingLeft: 10,\n    paddingRight: 10,\n    display: \"flex\",\n    justifyContent: \"flex-end\",\n    flexDirection: \"row\",\n    alignItems: \"center\",\n    marginBottom: 20,\n  },\n  titleValue: {\n    fontWeight: \"bold\",\n    fontSize: 22,\n  },\n});\n","import { StyleSheet } from \"react-native\";\n\nexport default StyleSheet.create({\n  button: {\n    marginTop: 10,\n    marginBottom: 10,\n    minWidth: \"90%\",\n    maxWidth: \"100%\",\n  },\n  buttonContent: {\n    minHeight: 55,\n  },\n  statistics: {\n    fontStyle: \"italic\",\n  },\n  value: {},\n});\n","import React from \"react\";\nimport { Text } from \"react-native\";\nimport { Button } from \"react-native-paper\";\nimport styles from \"./GamePageAnswer.styles\";\n\nconst successTheme = {\n  colors: {\n    primary: \"#8BC34A\",\n  },\n};\n\nconst warningTheme = {\n  colors: {\n    primary: \"#FF5722\",\n  },\n};\n\nconst GamePageAnswer: React.FC<GamePageAnswerProps> = ({\n  onAnswerClick,\n  id,\n  answerStatistics,\n  answerValue,\n  isLoading,\n  isAnyQuestionLoading,\n  isSelected,\n  isCorrectAnswer,\n  isAnswerRevealed,\n}: GamePageAnswerProps) => {\n  const handleAnswerClick = () => {\n    onAnswerClick(id);\n  };\n\n  const getTheme = () => {\n    if (isCorrectAnswer === true) {\n      return successTheme;\n    }\n\n    if (!isSelected || isAnyQuestionLoading) {\n      return undefined;\n    }\n\n    return warningTheme;\n  };\n\n  return (\n    <Button\n      onPress={!isAnswerRevealed ? handleAnswerClick : undefined}\n      style={styles.button}\n      contentStyle={styles.buttonContent}\n      mode=\"contained\"\n      disabled={\n        isAnyQuestionLoading ||\n        (isAnswerRevealed && !isSelected && !isCorrectAnswer)\n      }\n      loading={isLoading}\n      theme={getTheme()}\n    >\n      {isLoading ? null : (\n        <>\n          <Text style={styles.value}>{answerValue}</Text>{\" \"}\n          <Text style={styles.statistics}>{answerStatistics}</Text>\n        </>\n      )}\n    </Button>\n  );\n};\n\ninterface GamePageAnswerProps {\n  id: string;\n  onAnswerClick: (answerId: string) => void;\n  answerStatistics: string;\n  answerValue: string;\n  isLoading: boolean;\n  isAnyQuestionLoading: boolean;\n  isAnswerRevealed: boolean;\n  isSelected: boolean;\n  isCorrectAnswer: boolean;\n}\n\nexport default GamePageAnswer;\n","import React from \"react\";\nimport { ScrollView, View } from \"react-native\";\nimport {\n  Avatar,\n  Button,\n  Card,\n  ProgressBar,\n  Text,\n  Title,\n} from \"react-native-paper\";\nimport { SafeAreaView } from \"react-native-safe-area-context\";\nimport { T } from \"react-targem\";\nimport { Answer, Question } from \"../types\";\nimport styles from \"./GamePage.styles\";\nimport GamePageAnswer from \"./GamePageAnswer\";\n\nconst LeftContent: React.FC<CardTitleAddon> = (props: CardTitleAddon) => (\n  <Avatar.Text {...props} label=\"Q\" />\n);\n\ninterface CardTitleAddon {\n  size: number;\n}\n\nconst GamePage: React.FC<GamePageProps> = ({\n  totalQuestionsCount,\n  currentQuestionNumber,\n  question,\n  answers,\n  isQuestionLoading,\n  onBackButtonClick,\n  onAnswerClick,\n  questionLoadingId,\n  correctAnswerId,\n  selectedAnswerId,\n  isNextButtonVisible,\n  onNextButtonClick,\n}: GamePageProps) => {\n  const RightContent: React.FC<CardTitleAddon> = (props: CardTitleAddon) => (\n    <Button onPress={onBackButtonClick}>\n      <T message=\"Back\" />\n    </Button>\n  );\n\n  const [whatStart, whatEnd] = (question?.whatValue || \"\").split(\"{value}\");\n\n  return (\n    <ScrollView>\n      <Card style={styles.card}>\n        <SafeAreaView>\n          <Card.Title\n            title={\n              <>\n                <T message={\"Quiz question\"} />\n              </>\n            }\n            subtitle={\n              <>\n                {currentQuestionNumber} <T message=\"out of\" />{\" \"}\n                {totalQuestionsCount}\n              </>\n            }\n            left={LeftContent}\n            right={RightContent}\n          />\n\n          {isQuestionLoading ? <ProgressBar indeterminate /> : null}\n          {question ? (\n            <>\n              <View style={styles.coverContainer}>\n                <Card.Cover\n                  accessible={false}\n                  source={{\n                    uri: question.imgSrc,\n                  }}\n                />\n\n                {isNextButtonVisible ? (\n                  <View style={styles.coverButtonContainer}>\n                    <Button\n                      style={styles.nextQuestionButton}\n                      mode=\"contained\"\n                      onPress={onNextButtonClick}\n                    >\n                      <T message=\"Next question!\" />\n                    </Button>\n                    <View style={styles.sourceLinksContainer}>\n                      <Button>\n                        <Text\n                          accessibilityRole=\"link\"\n                          target=\"_blank\"\n                          href={\"https://\" + question?.url}\n                        >\n                          <T message=\"Question source\" />\n                        </Text>\n                      </Button>\n                      <Button>\n                        <Text\n                          accessibilityRole=\"link\"\n                          target=\"_blank\"\n                          href={\"https://\" + question?.answerUrl}\n                        >\n                          <T message=\"Answer source\" />\n                        </Text>\n                      </Button>\n                    </View>\n                  </View>\n                ) : null}\n              </View>\n              <Card.Content>\n                <Title style={styles.titleStatistics}>\n                  {question.whatStatistics}\n                </Title>\n                <Title style={styles.title}>\n                  {whatStart}\n                  <Text style={styles.titleValue}>{question.value}</Text>\n                  {whatEnd}.{\" \"}\n                  <T message=\"What else do you think my contain number\" />{\" \"}\n                  <Text style={styles.titleValue}>\n                    {question.value.toString()}\n                  </Text>\n                  ?\n                </Title>\n              </Card.Content>\n            </>\n          ) : null}\n          {answers ? (\n            <Card.Actions style={styles.buttonsContainer}>\n              {answers.map((a) => (\n                <GamePageAnswer\n                  key={a.id}\n                  answerValue={a.answerValue}\n                  answerStatistics={a.answerStatistics}\n                  onAnswerClick={onAnswerClick}\n                  isLoading={questionLoadingId === a.id}\n                  isAnyQuestionLoading={questionLoadingId !== undefined}\n                  isSelected={selectedAnswerId === a.id}\n                  isCorrectAnswer={a.id === correctAnswerId}\n                  isAnswerRevealed={isNextButtonVisible}\n                  {...a}\n                />\n              ))}\n            </Card.Actions>\n          ) : null}\n        </SafeAreaView>\n      </Card>\n    </ScrollView>\n  );\n};\n\ninterface GamePageProps {\n  currentQuestionNumber: number;\n  totalQuestionsCount: number;\n  isQuestionLoading: boolean;\n  questionLoadingId?: string;\n  correctAnswerId?: string;\n  selectedAnswerId?: string;\n  isNextButtonVisible: boolean;\n  question?: Question | null;\n  answers?: Answer[] | null;\n  onBackButtonClick: () => void;\n  onAnswerClick: (answerId: string) => void;\n  onNextButtonClick: () => void;\n}\n\nexport default GamePage;\n","// eslint-disable-next-line @typescript-eslint/no-var-requires\nexport const MOCK = require(\"./questions.json\").questions;\n","import { StackNavigationProp } from \"@react-navigation/stack\";\nimport React, { useEffect, useState } from \"react\";\nimport { QuestionWithAnswers, RootStackRoute, RootStackRoutes } from \"../types\";\nimport GamePage from \"./GamePage\";\nimport {\n  checkQuestion,\n  fetchQuestionByIndex,\n  QUESTIONS_COUNT,\n} from \"./GamePage.service\";\n\nconst GamePageContainer: React.FC<GamePageContainerProps> = ({\n  navigation,\n}: GamePageContainerProps) => {\n  const [currentQuestionNumber, setCurrentQuestionNumber] = useState<number>(0);\n  const [currentQuestion, setCurrentQuestion] = useState<\n    QuestionWithAnswers | undefined\n  >(undefined);\n  const [correctAnswerId, setCorrectAnswerId] = useState<string | undefined>(\n    undefined\n  );\n  const [selectedAnswerId, setSelectedAnswerId] = useState<\n    string | undefined\n  >();\n  const [isQuestionLoading, setIsQuestionLoading] = useState<boolean>(false);\n\n  async function fetchData(questionNumber: number) {\n    setIsQuestionLoading(true);\n    const question = await fetchQuestionByIndex(questionNumber);\n    setIsQuestionLoading(false);\n    setCurrentQuestion(question);\n  }\n\n  async function checkAnswer() {\n    if (!currentQuestion) {\n      throw new Error(\"There is no current question\");\n    }\n    const { correctAnswerId } = await checkQuestion(currentQuestion.id);\n    setCorrectAnswerId(correctAnswerId);\n  }\n\n  useEffect(() => {\n    fetchData(currentQuestionNumber);\n  }, [currentQuestionNumber]);\n\n  const handleLinkButtonClick = (routeName: RootStackRoute) => () => {\n    navigation.navigate(routeName);\n  };\n\n  const handleAnswerClick = (id: string) => {\n    setSelectedAnswerId(id);\n    checkAnswer();\n  };\n\n  const handleNextButtonClick = () => {\n    const nextQuestionNumber = currentQuestionNumber + 1;\n    if (nextQuestionNumber === QUESTIONS_COUNT) {\n      navigation.navigate(\"GameOver\", {\n        gameResults: [true, false, true, false, false, false],\n      });\n      return;\n    }\n    setCorrectAnswerId(undefined);\n    setSelectedAnswerId(undefined);\n    setCurrentQuestion(undefined);\n    setCurrentQuestionNumber(nextQuestionNumber);\n  };\n\n  return (\n    <GamePage\n      currentQuestionNumber={currentQuestionNumber + 1}\n      isQuestionLoading={isQuestionLoading}\n      question={currentQuestion?.question}\n      answers={currentQuestion?.answers}\n      totalQuestionsCount={QUESTIONS_COUNT}\n      correctAnswerId={correctAnswerId}\n      onBackButtonClick={handleLinkButtonClick(\"Home\")}\n      onAnswerClick={handleAnswerClick}\n      selectedAnswerId={selectedAnswerId}\n      isNextButtonVisible={Boolean(correctAnswerId)}\n      onNextButtonClick={handleNextButtonClick}\n    />\n  );\n};\n\ninterface GamePageContainerProps {\n  navigation: StackNavigationProp<RootStackRoutes, \"Game\">;\n}\n\nexport default GamePageContainer;\n","import { StyleSheet } from \"react-native\";\n\nexport default StyleSheet.create({\n  container: {\n    alignSelf: \"center\",\n    minHeight: \"100%\",\n    minWidth: \"100%\",\n    padding: 20,\n    borderRadius: 0,\n  },\n  content: {\n    marginTop: 20,\n  },\n  switchContainer: {\n    flexDirection: \"row\",\n    justifyContent: \"space-between\",\n  },\n});\n","import React from \"react\";\nimport { Card, Switch, Paragraph, Button, Avatar } from \"react-native-paper\";\nimport { SafeAreaView } from \"react-native-safe-area-context\";\nimport { T, useLocale } from \"react-targem\";\nimport { useSettings } from \"src/contexts/SettingsContext\";\nimport styles from \"./Settings.styles\";\nimport { StackNavigationProp } from \"@react-navigation/stack\";\nimport { RootStackRoutes, RootStackRoute } from \"../types\";\nimport { View } from \"react-native\";\n\nconst LeftContent: React.FC<CardTitleAddon> = (props: CardTitleAddon) => (\n  <Avatar.Text {...props} label=\"R\" />\n);\n\ninterface CardTitleAddon {\n  size: number;\n}\n\nconst Settings: React.FC<SettingsProps> = ({ navigation }: SettingsProps) => {\n  const { theme, setSettings } = useSettings();\n  const handleThemeChange = (isDark: boolean) => {\n    setSettings({ theme: isDark ? \"dark\" : \"default\" });\n  };\n\n  const handleLinkButtonClick = (routeName: RootStackRoute) => () => {\n    navigation.navigate(routeName);\n  };\n\n  const RightAddon = () => (\n    <Button mode=\"outlined\" onPress={handleLinkButtonClick(\"Home\")}>\n      <T message=\"Home\" />\n    </Button>\n  );\n\n  const { t } = useLocale();\n\n  return (\n    <Card style={styles.container}>\n      <SafeAreaView>\n        <Card.Title\n          title={<T message=\"Rules\" />}\n          left={LeftContent}\n          right={RightAddon}\n        />\n        <Card.Content style={styles.content}>\n          <View style={styles.switchContainer}>\n            <Paragraph>Is dark theme?</Paragraph>\n            <Switch\n              accessibilityRole=\"switch\"\n              accessibilityLabel={t(\"Toggle dark theme\")}\n              value={theme === \"dark\"}\n              onValueChange={handleThemeChange}\n            />\n          </View>\n        </Card.Content>\n      </SafeAreaView>\n    </Card>\n  );\n};\ninterface SettingsProps {\n  navigation: StackNavigationProp<RootStackRoutes, \"Settings\">;\n}\n\nexport default Settings;\n","import { createStackNavigator } from \"@react-navigation/stack\";\nimport React from \"react\";\nimport HomePage from \"./HomePage\";\nimport RulesPage from \"./RulesPage\";\nimport GameOverPage from \"./GameOverPage\";\nimport GamePage from \"./GamePage\";\nimport SettingsPage from \"./SettingsPage\";\n\nconst Stack = createStackNavigator();\n\nconst screenOptions = { animationEnabled: true };\n\nconst Pages: React.FC<HomePageProps> = () => {\n  return (\n    <Stack.Navigator headerMode=\"none\" initialRouteName=\"Home\">\n      <Stack.Screen options={screenOptions} name=\"Home\" component={HomePage} />\n      <Stack.Screen\n        options={screenOptions}\n        name=\"Rules\"\n        component={RulesPage}\n      />\n      <Stack.Screen\n        options={screenOptions}\n        name=\"GameOver\"\n        component={GameOverPage}\n      />\n      <Stack.Screen options={screenOptions} name=\"Game\" component={GamePage} />\n      <Stack.Screen\n        options={screenOptions}\n        name=\"Settings\"\n        component={SettingsPage}\n      />\n    </Stack.Navigator>\n  );\n};\ninterface HomePageProps {}\n\nexport default Pages;\n","import React from \"react\";\nimport AppLayout from \"./src/components/AppLayout\";\nimport Pages from \"./src/pages\";\n\nconst App: React.FC = () => {\n  return (\n    <AppLayout>\n      <Pages />\n    </AppLayout>\n  );\n};\n\nexport default App;\n"],"sourceRoot":""}