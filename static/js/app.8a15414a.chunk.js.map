{"version":3,"sources":["src/pages/HomePage/assets/logo.png","src/config/locales.ts","src/utils/locales.ts","src/contexts/SettingsContext/SettingsContext.tsx","src/config/themes.ts","src/components/AppLayout/AppLayout.tsx","src/components/LocaleSelector/LocaleSelector.tsx","src/pages/HomePage/HomePage.styles.ts","src/pages/HomePage/HomePage.tsx","src/pages/RulesPage/RulesPage.styles.ts","src/pages/RulesPage/RulesPage.tsx","src/pages/GamePage/GamePage.styles.ts","src/pages/GamePage/GamePageAnswer/GamePageAnswer.tsx","src/pages/GamePage/GamePage.tsx","src/pages/GamePage/GamePage.service.ts","src/pages/GamePage/GamePageContainer.tsx","src/pages/index.tsx","App.tsx"],"names":["module","exports","locales","key","internationalName","localName","getBrowserLocale","supportedLocales","fallbackLocale","browserLocale","window","navigator","lang","language","locale","includes","localeToMatch","split","findLocale","getInitialValues","theme","map","l","SettingsContext","React","createContext","setSettings","resetSettings","SettingsContextProvider","props","settings","setState","state","newSettings","AsyncStorage","setItem","JSON","stringify","updateSettingsWithPersistedValue","a","async","getSettingsFromLocalStorage","json","getItem","parse","this","providerValue","Provider","value","children","PureComponent","useSettings","useContext","AppLayoutInternal","NavigationContainer","translations","StatusBar","style","AppLayout","LocalSelector","buttonStyle","useState","visible","setVisible","closeMenu","Menu","onDismiss","anchor","Button","mode","DefaultTheme","onPress","message","Item","localeKey","title","StyleSheet","create","card","width","height","borderRadius","backgroundColor","position","cardContent","alignItems","display","justifyContent","cardImageContainer","elevation","cardImage","cardTitle","marginTop","marginBottom","color","cardButton","HomePage","navigation","handleLinkButtonClick","routeName","navigate","Card","styles","Content","View","Image","source","logo","Title","Platform","OS","Linking","openURL","container","flex","minHeight","alignSelf","padding","header","fontSize","lineHeight","text","RulesPage","ScrollView","contentContainerStyle","SafeAreaView","Paragraph","accessibilityRole","overflow","buttonsContainer","flexWrap","button","minWidth","buttonContent","successTheme","colors","primary","warningTheme","GamePageAnswer","onAnswerClick","id","what","where","isLoading","contentStyle","isAnyQuestionLoading","isSelected","isCorrectAnswer","isAnswerRevealed","undefined","disabled","loading","LeftContent","Text","label","GamePage","totalQuestionsCount","currentQuestionNumber","question","answers","isQuestionLoading","onBackButtonClick","questionLoadingId","correctAnswerId","selectedAnswerId","isNextButtonVisible","onNextButtonClick","subtitle","left","right","ProgressBar","indeterminate","Cover","accessible","uri","imgSrc","count","toLowerCase","Actions","MOCK","fetchQuestionByIndex","index","Promise","resolve","reject","setTimeout","length","checkQuestion","questionId","GamePageContainer","setCurrentQuestionNumber","currentQuestion","setCurrentQuestion","setCorrectAnswerId","setSelectedAnswerId","setIsQuestionLoading","useEffect","questionNumber","fetchData","Error","checkAnswer","Boolean","nextQuestionNumber","Stack","createStackNavigator","Pages","Navigator","initialRouteName","headerMode","Screen","name","component","App"],"mappings":"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","file":"static/js/app.8a15414a.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.760b94f4.png\";","export const locales = [\n  {\n    key: \"en-GB\",\n    internationalName: \"English (GB)\",\n    localName: \"English (GB)\",\n  },\n  {\n    key: \"en-US\",\n    internationalName: \"English (US)\",\n    localName: \"English (US)\",\n  },\n  {\n    key: \"ru\",\n    internationalName: \"Russian\",\n    localName: \"Русский\",\n  },\n  {\n    key: \"fr\",\n    internationalName: \"French\",\n    localName: \"Française\",\n  },\n] as const;\n\nexport type Locale = typeof locales[number][\"key\"];\n","// Originally taken from https://github.com/trucknet-io/react-targem/blob/develop/src/utils/locale.ts\n\nimport { Locale } from \"src/config/locales\";\n\nexport function findLocale(\n  supportedLocales: Locale[],\n  locale: string\n): Locale | undefined {\n  if (supportedLocales.includes(locale as Locale)) {\n    return locale as Locale;\n  }\n  for (const localeToMatch of supportedLocales) {\n    if (localeToMatch.includes(locale.split(\"-\")[0])) {\n      return localeToMatch;\n    }\n  }\n  return undefined;\n}\n\nexport function getBrowserLocale(\n  supportedLocales: Locale[],\n  fallbackLocale: Locale\n): Locale {\n  let browserLocale: Locale | undefined;\n  if (typeof window !== \"undefined\" && window.navigator) {\n    const lang = window.navigator.language;\n    if (lang) {\n      browserLocale = findLocale(supportedLocales, lang);\n    }\n  }\n\n  return browserLocale || fallbackLocale;\n}\n","import React, { useContext } from \"react\";\nimport { defaultThemeName, ThemeName } from \"src/config/themes\";\nimport { Locale, locales } from \"src/config/locales\";\nimport { getBrowserLocale } from \"src/utils/locales\";\nimport AsyncStorage from \"@react-native-community/async-storage\";\n\nconst LOCAL_STORAGE_KEY = \"settings\";\n\ninterface SettingsContextProviderState {\n  locale: Locale;\n  theme: ThemeName;\n}\n\nexport interface SettingsContext extends SettingsContextProviderState {\n  setSettings: (state: Partial<SettingsContextProviderState>) => void;\n  resetSettings: () => void;\n}\n\nconst getInitialValues = (): SettingsContextProviderState => ({\n  theme: defaultThemeName,\n  locale: getBrowserLocale(\n    locales.map((l) => l.key),\n    locales[0].key\n  ),\n});\n\nconst SettingsContext = React.createContext<SettingsContext>({\n  ...getInitialValues(),\n  // eslint-disable-next-line @typescript-eslint/no-empty-function\n  setSettings: () => {},\n  // eslint-disable-next-line @typescript-eslint/no-empty-function\n  resetSettings: () => {},\n});\n\nexport class SettingsContextProvider extends React.PureComponent<\n  Partial<SettingsContextProviderState>,\n  SettingsContextProviderState\n> {\n  constructor(props: Partial<SettingsContext>) {\n    super(props);\n    this.state = {\n      ...getInitialValues(),\n    };\n\n    void this.updateSettingsWithPersistedValue();\n  }\n\n  public render(): React.ReactNode {\n    const { state, props } = this;\n\n    const providerValue = {\n      ...state,\n      ...props,\n      setSettings: this.setSettings,\n      resetSettings: this.resetSettings,\n    };\n\n    return (\n      <SettingsContext.Provider value={providerValue}>\n        {props.children}\n      </SettingsContext.Provider>\n    );\n  }\n\n  private setSettings = (settings: Partial<SettingsContextProviderState>) => {\n    this.setState((state: SettingsContextProviderState) => {\n      const newSettings = {\n        ...state,\n        ...settings,\n      };\n      void AsyncStorage.setItem(LOCAL_STORAGE_KEY, JSON.stringify(newSettings));\n      return newSettings;\n    });\n  };\n\n  private updateSettingsWithPersistedValue = async (): Promise<void> => {\n    const json = await this.getSettingsFromLocalStorage();\n    this.setState((state) => ({\n      ...state,\n      ...json,\n    }));\n  };\n\n  private getSettingsFromLocalStorage = async (): Promise<\n    Partial<SettingsContextProviderState>\n  > => {\n    const json = await AsyncStorage.getItem(LOCAL_STORAGE_KEY);\n\n    if (!json) {\n      return {};\n    }\n\n    return JSON.parse(json);\n  };\n\n  private resetSettings = () => {\n    this.setState(getInitialValues());\n  };\n}\n\nexport const useSettings = (): SettingsContext => useContext(SettingsContext);\n","export const themes = [\"default\", \"dark\"] as const;\n\nexport const defaultThemeName: ThemeName = \"default\";\n\nexport type ThemeName = typeof themes[number];\n","import { StatusBar } from \"expo-status-bar\";\nimport React from \"react\";\nimport { TargemProvider } from \"react-targem\";\n// eslint-disable-next-line @typescript-eslint/ban-ts-comment\n// @ts-ignore\nimport translations from \"src/i18n/translations.json\";\nimport { Provider as PaperProvider } from \"react-native-paper\";\nimport {\n  SettingsContextProvider,\n  useSettings,\n} from \"src/contexts/SettingsContext\";\nimport \"react-native-gesture-handler\";\nimport { NavigationContainer } from \"@react-navigation/native\";\nimport { SafeAreaProvider } from \"react-native-safe-area-context\";\n\nconst AppLayoutInternal: React.FC<AppLayoutInternalProps> = ({\n  children,\n}: AppLayoutInternalProps) => {\n  const { locale } = useSettings();\n\n  return (\n    <SafeAreaProvider>\n      <PaperProvider>\n        <NavigationContainer>\n          <TargemProvider locale={locale} translations={translations}>\n            {children}\n            <StatusBar style=\"auto\" />\n          </TargemProvider>\n        </NavigationContainer>\n      </PaperProvider>\n    </SafeAreaProvider>\n  );\n};\ninterface AppLayoutInternalProps extends React.PropsWithChildren<{}> {}\n\nconst AppLayout: React.FC<AppLayoutProps> = ({ children }: AppLayoutProps) => (\n  <SettingsContextProvider>\n    <AppLayoutInternal>{children}</AppLayoutInternal>\n  </SettingsContextProvider>\n);\n\ninterface AppLayoutProps extends React.PropsWithChildren<{}> {}\n\nexport default AppLayout;\n","import React from \"react\";\nimport { locales, Locale } from \"src/config/locales\";\nimport { useSettings } from \"src/contexts/SettingsContext\";\nimport { Button, DefaultTheme, Menu } from \"react-native-paper\";\nimport { StyleProp, ViewStyle } from \"react-native\";\nimport { T } from \"react-targem\";\n\nconst LocalSelector: React.FC<LocalSelectorProps> = ({\n  buttonStyle,\n}: LocalSelectorProps) => {\n  const { setSettings } = useSettings();\n  const handleLocaleChange = (localeKey: Locale) => () => {\n    setSettings({\n      locale: localeKey,\n    });\n    closeMenu();\n  };\n\n  const [visible, setVisible] = React.useState(false);\n  const openMenu = () => setVisible(true);\n  const closeMenu = () => setVisible(false);\n\n  return (\n    <Menu\n      visible={visible}\n      onDismiss={closeMenu}\n      anchor={\n        <Button\n          style={buttonStyle}\n          mode=\"outlined\"\n          theme={DefaultTheme}\n          onPress={openMenu}\n        >\n          <T message=\"Choose language\" />\n        </Button>\n      }\n    >\n      {locales.map((l) => (\n        <Menu.Item\n          key={l.key}\n          onPress={handleLocaleChange(l.key)}\n          title={\n            <>\n              {l.localName} ({l.internationalName})\n            </>\n          }\n        />\n      ))}\n    </Menu>\n  );\n};\n\ninterface LocalSelectorProps {\n  buttonStyle: StyleProp<ViewStyle>;\n}\n\nexport default LocalSelector;\n","import { StyleSheet } from \"react-native\";\n\nexport default StyleSheet.create({\n  card: {\n    width: \"100%\",\n    height: \"100%\",\n    borderRadius: 0,\n    backgroundColor: \"#625772\",\n    position: \"relative\",\n  },\n  cardContent: {\n    alignItems: \"center\",\n    position: \"relative\",\n    display: \"flex\",\n    justifyContent: \"center\",\n    height: \"100%\",\n  },\n  cardImageContainer: {\n    elevation: 8,\n    height: \"100%\",\n    position: \"absolute\",\n  },\n  cardImage: {\n    width: 370,\n    height: \"100%\",\n  },\n  cardTitle: {\n    marginTop: 64,\n    marginBottom: 64,\n    color: \"#fff\",\n  },\n  cardButton: {\n    marginBottom: 32,\n  },\n});\n","import { StackNavigationProp } from \"@react-navigation/stack\";\nimport React from \"react\";\nimport { Image, View, Platform, Linking } from \"react-native\";\nimport { Button, Card, DefaultTheme, Title } from \"react-native-paper\";\nimport { T } from \"react-targem\";\nimport LocalSelector from \"src/components/LocaleSelector\";\nimport { RootStackRoute, RootStackRoutes } from \"../types\";\nimport logo from \"./assets/logo.png\";\nimport styles from \"./HomePage.styles\";\n\nconst MOBILE_APPLICATION_LINK = \"https://expo.io/@ohm-team/lquiz-client\";\n\nconst HomePage: React.FC<HomePageProps> = ({ navigation }: HomePageProps) => {\n  const handleLinkButtonClick = (routeName: RootStackRoute) => () => {\n    navigation.navigate(routeName);\n  };\n\n  const handleDownloadButtonClick = () => {\n    Linking.openURL(MOBILE_APPLICATION_LINK);\n  };\n\n  return (\n    <Card style={styles.card}>\n      <Card.Content style={styles.cardContent}>\n        <View style={styles.cardImageContainer}>\n          <Image source={logo} style={styles.cardImage} />\n        </View>\n        <Title style={styles.cardTitle}>\n          <T message=\"Letz quiz!\" />\n        </Title>\n        <Button\n          mode=\"contained\"\n          theme={DefaultTheme}\n          onPress={handleLinkButtonClick(\"Game\")}\n          style={styles.cardButton}\n        >\n          <T message=\"Play\" />\n        </Button>\n        <Button\n          mode=\"outlined\"\n          theme={DefaultTheme}\n          onPress={handleLinkButtonClick(\"Rules\")}\n          style={styles.cardButton}\n        >\n          <T message=\"Rules\" />\n        </Button>\n        {Platform.OS === \"web\" ? (\n          <Button\n            mode=\"outlined\"\n            theme={DefaultTheme}\n            onPress={handleDownloadButtonClick}\n            style={styles.cardButton}\n          >\n            <T message=\"Download an app\" />\n          </Button>\n        ) : null}\n        <LocalSelector buttonStyle={styles.cardButton} />\n      </Card.Content>\n    </Card>\n  );\n};\n\ninterface HomePageProps {\n  navigation: StackNavigationProp<RootStackRoutes, \"Home\">;\n}\n\nexport default HomePage;\n","import { StyleSheet } from \"react-native\";\n\nexport default StyleSheet.create({\n  container: {\n    flex: 1,\n    justifyContent: \"center\",\n    minHeight: \"100%\",\n  },\n  card: {\n    alignSelf: \"center\",\n    padding: 20,\n  },\n  header: {\n    fontSize: 30,\n    lineHeight: 30,\n    marginBottom: 20,\n    marginTop: 20,\n  },\n  text: {\n    fontSize: 15,\n    lineHeight: 20,\n  },\n});\n","import { StackNavigationProp } from \"@react-navigation/stack\";\nimport React from \"react\";\nimport { Button, Card, DefaultTheme, Paragraph } from \"react-native-paper\";\nimport { T } from \"react-targem\";\nimport { RootStackRoute, RootStackRoutes } from \"../types\";\nimport styles from \"./RulesPage.styles\";\nimport { SafeAreaView } from \"react-native-safe-area-context\";\nimport { ScrollView } from \"react-native\";\n\nconst RulesPage: React.FC<RulesPageProps> = ({\n  navigation,\n}: RulesPageProps) => {\n  const handleLinkButtonClick = (routeName: RootStackRoute) => () => {\n    navigation.navigate(routeName);\n  };\n  return (\n    <ScrollView contentContainerStyle={styles.container}>\n      <Card style={styles.card}>\n        <SafeAreaView>\n          <Button\n            theme={DefaultTheme}\n            mode=\"outlined\"\n            onPress={handleLinkButtonClick(\"Home\")}\n          >\n            <T message=\"Home\" />\n          </Button>\n          <Paragraph style={styles.header} accessibilityRole=\"header\">\n            Rules\n          </Paragraph>\n          <Paragraph style={styles.text}>\n            <T message=\"Within one game, the user is assigned 15 questions.\" />\n          </Paragraph>\n          <Paragraph>\n            <T message=\"Points are awarded for each correct answer (quiz coins)\" />\n          </Paragraph>\n          <Paragraph>\n            <T message=\"After passing all the questions, the general stratistics of the user is formed.\" />\n          </Paragraph>\n        </SafeAreaView>\n      </Card>\n    </ScrollView>\n  );\n};\n\ninterface RulesPageProps {\n  navigation: StackNavigationProp<RootStackRoutes, \"Rules\">;\n}\n\nexport default RulesPage;\n","import { StyleSheet } from \"react-native\";\n\nexport default StyleSheet.create({\n  card: {\n    minHeight: \"100%\",\n    overflow: \"visible\",\n    width: \"100%\",\n    borderRadius: 0,\n  },\n  buttonsContainer: {\n    display: \"flex\",\n    flexWrap: \"wrap\",\n    justifyContent: \"center\",\n    marginBottom: 32,\n  },\n  button: {\n    marginTop: 16,\n    marginBottom: 16,\n    minWidth: \"90%\",\n  },\n  buttonContent: {\n    minHeight: 55,\n  },\n  title: {\n    marginTop: 16,\n    marginBottom: 0,\n  },\n});\n","import React from \"react\";\nimport { T } from \"react-targem\";\nimport { Button } from \"react-native-paper\";\nimport { StyleProp, ViewStyle, TextStyle } from \"react-native\";\n\nconst successTheme = {\n  colors: {\n    primary: \"#8BC34A\",\n  },\n};\n\nconst warningTheme = {\n  colors: {\n    primary: \"#FF5722\",\n  },\n};\n\nconst GamePageAnswer: React.FC<GamePageAnswerProps> = ({\n  onAnswerClick,\n  id,\n  what,\n  where,\n  isLoading,\n  contentStyle,\n  style,\n  isAnyQuestionLoading,\n  isSelected,\n  isCorrectAnswer,\n  isAnswerRevealed,\n}: GamePageAnswerProps) => {\n  const handleAnswerClick = () => {\n    onAnswerClick(id);\n  };\n\n  const getTheme = () => {\n    if (isCorrectAnswer === true) {\n      return successTheme;\n    }\n\n    if (!isSelected || isAnyQuestionLoading) {\n      return undefined;\n    }\n\n    return warningTheme;\n  };\n\n  return (\n    <Button\n      onPress={!isAnswerRevealed ? handleAnswerClick : undefined}\n      style={style}\n      contentStyle={contentStyle}\n      mode=\"contained\"\n      disabled={\n        isAnyQuestionLoading ||\n        (isAnswerRevealed && !isSelected && !isCorrectAnswer)\n      }\n      loading={isLoading}\n      theme={getTheme()}\n    >\n      {isLoading ? null : (\n        <>\n          {what} <T message=\"in\" /> {where}\n        </>\n      )}\n    </Button>\n  );\n};\n\ninterface GamePageAnswerProps {\n  id: string;\n  onAnswerClick: (answerId: string) => void;\n  what: string;\n  where: string;\n  isLoading: boolean;\n  isAnyQuestionLoading: boolean;\n  isAnswerRevealed: boolean;\n  isSelected: boolean;\n  isCorrectAnswer: boolean;\n  style: StyleProp<ViewStyle>;\n  contentStyle: StyleProp<TextStyle>;\n}\n\nexport default GamePageAnswer;\n","import React from \"react\";\nimport { T } from \"react-targem\";\nimport { Question } from \"../types\";\nimport styles from \"./GamePage.styles\";\nimport { Button, Card, Title, Avatar, ProgressBar } from \"react-native-paper\";\nimport GamePageAnswer from \"./GamePageAnswer\";\nimport { SafeAreaView } from \"react-native-safe-area-context\";\nimport { ScrollView } from \"react-native\";\n\nconst LeftContent: React.FC<CardTitleAddon> = (props: CardTitleAddon) => (\n  <Avatar.Text {...props} label=\"Q\" />\n);\n\ninterface CardTitleAddon {\n  size: number;\n}\n\nconst GamePage: React.FC<GamePageProps> = ({\n  totalQuestionsCount,\n  currentQuestionNumber,\n  question,\n  answers,\n  isQuestionLoading,\n  onBackButtonClick,\n  onAnswerClick,\n  questionLoadingId,\n  correctAnswerId,\n  selectedAnswerId,\n  isNextButtonVisible,\n  onNextButtonClick,\n}: GamePageProps) => {\n  const RightContent: React.FC<CardTitleAddon> = (props: CardTitleAddon) => (\n    <Button onPress={onBackButtonClick}>\n      <T message=\"Back\" />\n    </Button>\n  );\n\n  return (\n    <ScrollView>\n      <Card style={styles.card}>\n        <SafeAreaView>\n          <Card.Title\n            title={\n              <>\n                <T message={\"Quiz question #\"} />\n                {currentQuestionNumber}\n              </>\n            }\n            subtitle={\n              <>\n                <T message=\"out of\" /> {totalQuestionsCount}\n              </>\n            }\n            left={LeftContent}\n            right={RightContent}\n          />\n\n          {isQuestionLoading ? <ProgressBar indeterminate /> : null}\n          {question ? (\n            <>\n              <Card.Cover\n                accessible={false}\n                source={{\n                  uri: question.imgSrc,\n                }}\n              />\n              <Card.Content>\n                <Title style={styles.title}>\n                  {question.count} {question.what.toLowerCase()}{\" \"}\n                  <T message=\"in\" /> {question.where}.{\" \"}\n                  <T message=\"What else do you think my contain number\" />{\" \"}\n                  {question.count}?\n                </Title>\n              </Card.Content>\n            </>\n          ) : null}\n          {answers ? (\n            <Card.Actions style={styles.buttonsContainer}>\n              {answers.map((a) => (\n                <GamePageAnswer\n                  key={a.id}\n                  onAnswerClick={onAnswerClick}\n                  style={styles.button}\n                  contentStyle={styles.buttonContent}\n                  isLoading={questionLoadingId === a.id}\n                  isAnyQuestionLoading={questionLoadingId !== undefined}\n                  isSelected={selectedAnswerId === a.id}\n                  isCorrectAnswer={a.id === correctAnswerId}\n                  isAnswerRevealed={isNextButtonVisible}\n                  {...a}\n                />\n              ))}\n              {isNextButtonVisible ? (\n                <Button\n                  mode=\"outlined\"\n                  style={styles.button}\n                  contentStyle={styles.buttonContent}\n                  onPress={onNextButtonClick}\n                >\n                  <T message=\"Next question!\" />\n                </Button>\n              ) : null}\n            </Card.Actions>\n          ) : null}\n        </SafeAreaView>\n      </Card>\n    </ScrollView>\n  );\n};\n\ninterface GamePageProps {\n  currentQuestionNumber: number;\n  totalQuestionsCount: number;\n  isQuestionLoading: boolean;\n  questionLoadingId?: string;\n  correctAnswerId?: string;\n  selectedAnswerId?: string;\n  isNextButtonVisible: boolean;\n  question?: Question | null;\n  answers?:\n    | {\n        what: string;\n        where: string;\n        id: string;\n      }[]\n    | null;\n  onBackButtonClick: () => void;\n  onAnswerClick: (answerId: string) => void;\n  onNextButtonClick: () => void;\n}\n\nexport default GamePage;\n","import { QuestionWithAnswers } from \"../types\";\n\nexport const MOCK: QuestionWithAnswers[] = [\n  {\n    id: \"q-1\",\n    question: {\n      what: \"Babies were born\",\n      where: \"2019\",\n      count: 2042,\n      imgSrc: `https://source.unsplash.com/random?quiz&version=1}`,\n    },\n    answers: [\n      {\n        what: \"Suicides in Luxembourg county\",\n        where: \"2013\",\n        id: \"1\",\n      },\n      {\n        what: \"Bottles of beers sold\",\n        where: \"Aug, 2009\",\n        id: \"2\",\n      },\n      {\n        what: \"Students has been graduated from Luxmebourg philharmonie\",\n        where: \"2019\",\n        id: \"3\",\n      },\n      {\n        what: \"Criminal cases closed\",\n        where: \"2010\",\n        id: \"4\",\n      },\n    ],\n  },\n  {\n    id: \"q-2\",\n    question: {\n      what: \"Water level was\",\n      where: \"1993\",\n      count: 22,\n      imgSrc: \"https://source.unsplash.com/random?quiz&version=2\",\n    },\n    answers: [\n      {\n        what: \"Biggest bird weight\",\n        where: \"ever\",\n        id: \"5\",\n      },\n      {\n        what: \"Amount of pigs\",\n        where: \"2001\",\n        id: \"6\",\n      },\n      {\n        what: \"Girls were born\",\n        where: \"2003\",\n        id: \"7\",\n      },\n      {\n        what: \"COVID cases\",\n        where: \"2019\",\n        id: \"8\",\n      },\n    ],\n  },\n];\nexport const QUESTIONS_COUNT = 20;\n\nexport const fetchQuestionByIndex = async (\n  index: number\n): Promise<QuestionWithAnswers> => {\n  return new Promise((resolve, reject) => {\n    if (index > QUESTIONS_COUNT) {\n      reject(\"No such question\");\n      return;\n    }\n    setTimeout(() => {\n      resolve(MOCK[index % MOCK.length]);\n    }, 1500);\n  });\n};\n\n// eslint-disable-next-line\nexport const checkQuestion = async (\n  questionId: string\n): Promise<{ correctAnswerId: string }> => {\n  return { correctAnswerId: questionId === \"q-1\" ? \"1\" : \"5\" };\n};\n","import { StackNavigationProp } from \"@react-navigation/stack\";\nimport React, { useEffect, useState } from \"react\";\nimport { QuestionWithAnswers, RootStackRoute, RootStackRoutes } from \"../types\";\nimport GamePage from \"./GamePage\";\nimport {\n  checkQuestion,\n  fetchQuestionByIndex,\n  QUESTIONS_COUNT,\n} from \"./GamePage.service\";\n\nconst GamePageContainer: React.FC<GamePageContainerProps> = ({\n  navigation,\n}: GamePageContainerProps) => {\n  const [currentQuestionNumber, setCurrentQuestionNumber] = useState<number>(0);\n  const [currentQuestion, setCurrentQuestion] = useState<\n    QuestionWithAnswers | undefined\n  >(undefined);\n  const [correctAnswerId, setCorrectAnswerId] = useState<string | undefined>(\n    undefined\n  );\n  const [selectedAnswerId, setSelectedAnswerId] = useState<\n    string | undefined\n  >();\n  const [isQuestionLoading, setIsQuestionLoading] = useState<boolean>(false);\n\n  async function fetchData(questionNumber: number) {\n    setIsQuestionLoading(true);\n    const question = await fetchQuestionByIndex(questionNumber);\n    setIsQuestionLoading(false);\n    setCurrentQuestion(question);\n  }\n\n  async function checkAnswer() {\n    if (!currentQuestion) {\n      throw new Error(\"There is no current question\");\n    }\n    const { correctAnswerId } = await checkQuestion(currentQuestion.id);\n    setCorrectAnswerId(correctAnswerId);\n  }\n\n  useEffect(() => {\n    fetchData(currentQuestionNumber);\n  }, [currentQuestionNumber]);\n\n  const handleLinkButtonClick = (routeName: RootStackRoute) => () => {\n    navigation.navigate(routeName);\n  };\n\n  const handleAnswerClick = (id: string) => {\n    setSelectedAnswerId(id);\n    checkAnswer();\n  };\n\n  const handleNextButtonClick = () => {\n    const nextQuestionNumber = currentQuestionNumber + 1;\n    if (nextQuestionNumber === QUESTIONS_COUNT) {\n      navigation.navigate(\"Home\");\n      return;\n    }\n    setCorrectAnswerId(undefined);\n    setSelectedAnswerId(undefined);\n    setCurrentQuestion(undefined);\n    setCurrentQuestionNumber(nextQuestionNumber);\n  };\n\n  return (\n    <GamePage\n      currentQuestionNumber={currentQuestionNumber + 1}\n      isQuestionLoading={isQuestionLoading}\n      question={currentQuestion?.question}\n      answers={currentQuestion?.answers}\n      totalQuestionsCount={QUESTIONS_COUNT}\n      correctAnswerId={correctAnswerId}\n      onBackButtonClick={handleLinkButtonClick(\"Home\")}\n      onAnswerClick={handleAnswerClick}\n      selectedAnswerId={selectedAnswerId}\n      isNextButtonVisible={Boolean(correctAnswerId)}\n      onNextButtonClick={handleNextButtonClick}\n    />\n  );\n};\n\ninterface GamePageContainerProps {\n  navigation: StackNavigationProp<RootStackRoutes, \"Game\">;\n}\n\nexport default GamePageContainer;\n","import { createStackNavigator } from \"@react-navigation/stack\";\nimport React from \"react\";\nimport HomePage from \"./HomePage\";\nimport RulesPage from \"./RulesPage\";\nimport GamePage from \"./GamePage\";\n\nconst Stack = createStackNavigator();\n\nconst Pages: React.FC<HomePageProps> = () => {\n  return (\n    <Stack.Navigator initialRouteName=\"Home\" headerMode=\"none\">\n      <Stack.Screen name=\"Home\" component={HomePage} />\n      <Stack.Screen name=\"Rules\" component={RulesPage} />\n      <Stack.Screen name=\"Game\" component={GamePage} />\n    </Stack.Navigator>\n  );\n};\ninterface HomePageProps {}\n\nexport default Pages;\n","import React from \"react\";\nimport AppLayout from \"./src/components/AppLayout\";\nimport Pages from \"./src/pages\";\n\nconst App: React.FC = () => {\n  return (\n    <AppLayout>\n      <Pages />\n    </AppLayout>\n  );\n};\n\nexport default App;\n"],"sourceRoot":""}