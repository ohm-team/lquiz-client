{"version":3,"sources":["src/pages/HomePage/assets/logo.png","src/pages/HomePage/assets/logo_dark.png","src/config/themes.ts","src/config/locales.ts","src/utils/locales.ts","src/contexts/SettingsContext/SettingsContext.tsx","src/pages/GamePage/GamePage.service.ts","src/components/AppLayout/AppLayout.tsx","src/components/LocaleSelector/LocaleSelector.tsx","src/utils/native.ts","src/components/ThemeToggler/ThemeToggler.styles.tsx","src/components/ThemeToggler/ThemeToggler.tsx","src/pages/HomePage/HomePage.styles.ts","src/pages/HomePage/HomePage.tsx","src/pages/RulesPage/RulesPage.styles.ts","src/pages/RulesPage/RulesPage.tsx","src/pages/GameOverPage/GameOverPage.styles.ts","src/pages/GameOverPage/GameOverPage.tsx","src/pages/GameOverPage/GameOverPage.container.tsx","src/pages/GamePage/GamePage.styles.ts","src/pages/GamePage/GamePageAnswer/GamePageAnswer.styles.ts","src/pages/GamePage/GamePageAnswer/GamePageAnswer.tsx","src/pages/GamePage/GamePage.tsx","src/pages/GamePage/GamePage.mock.ts","src/pages/GamePage/GamePageContainer.tsx","src/pages/SettingsPage/Settings.styles.ts","src/pages/SettingsPage/Settings.tsx","src/pages/index.tsx","App.tsx"],"names":["module","exports","defaultThemeName","Appearance","getColorScheme","locales","key","internationalName","localName","getBrowserLocale","supportedLocales","fallbackLocale","browserLocale","window","navigator","lang","language","locale","includes","localeToMatch","split","findLocale","questionsCache","getRandomName","min","max","names","require","length","Math","floor","random","getInitialValues","theme","map","l","nickName","SettingsContext","React","createContext","setSettings","resetSettings","SettingsContextProvider","props","settings","setState","state","newSettings","AsyncStorage","setItem","JSON","stringify","updateSettingsWithPersistedValue","a","async","getSettingsFromLocalStorage","json","getItem","parse","this","providerValue","Provider","value","children","PureComponent","useSettings","useContext","AppLayoutInternal","DarkTheme","DefaultTheme","NavigationContainer","translations","StatusBar","style","AppLayout","LocalSelector","buttonStyle","useState","visible","setVisible","closeMenu","Menu","onDismiss","anchor","Button","mode","onPress","message","Item","localeKey","title","openLinkInNewTab","url","Platform","OS","open","Linking","openURL","StyleSheet","create","text","marginRight","switchContainer","flexDirection","alignItems","justifyContent","ThemeToggler","withText","t","useLocale","View","styles","Paragraph","Switch","trackColor","accessibilityRole","accessibilityLabel","onValueChange","isDark","card","width","height","borderRadius","backgroundColor","position","cardContent","display","cardImageContainer","elevation","buttonsContainer","marginTop","linearGradient","cardImage","cardTitle","marginBottom","color","cardButton","themeToggler","top","left","getButtonTheme","isDarkTheme","colors","primary","getGradientColors","HomePage","navigation","handleLinkButtonClick","routeName","args","navigate","Card","LinearGradient","locations","Content","Image","source","logo","darkLogo","container","flex","minHeight","alignSelf","minWidth","padding","content","header","fontSize","lineHeight","LeftContent","Text","label","RulesPage","ScrollView","contentContainerStyle","SafeAreaView","Title","right","flexWrap","button","paddingTop","paddingBottom","GameOverPage","facebookShareMessage","facebookShareURL","userStatus","pace","accuracy","correctAnswered","totalAnswered","paceStatus","goto","postOnFacebook","facebookParameters","encodeURI","join","Cover","accessible","uri","ProgressBar","progress","Colors","red800","green800","GameOverPageContainer","params","route","gameResults","gamePace","round","reduce","v","filter","Boolean","overflow","coverContainer","coverButtonContainer","bottom","nextQuestionButton","paddingHorizontal","paddingVertical","textAlign","titleStatistics","fontStyle","sourceLinksContainer","paddingLeft","paddingRight","titleValue","fontWeight","maxWidth","buttonContent","statistics","successTheme","warningTheme","GamePageAnswer","onAnswerClick","id","answerStatistics","answerValue","isLoading","isAnyQuestionLoading","isSelected","isCorrectAnswer","isAnswerRevealed","undefined","contentStyle","disabled","loading","GamePage","totalQuestionsCount","currentQuestionNumber","question","answers","isQuestionLoading","onBackButtonClick","questionLoadingId","correctAnswerId","selectedAnswerId","isNextButtonVisible","onNextButtonClick","whatValue","whatStart","whatEnd","subtitle","indeterminate","imgSrc","answerUrl","whatStatistics","toString","Actions","MOCK","questions","transformQuestion","q","i","correctAnswerIndex","fetchQuestionByIndex","index","Promise","resolve","reject","setTimeout","checkQuestion","questionId","find","Error","GamePageContainer","setCurrentQuestionNumber","currentQuestion","setCurrentQuestion","setCorrectAnswerId","setSelectedAnswerId","setIsQuestionLoading","stats","setStats","useEffect","started","Date","now","questionNumber","fetchData","ended","isCorrect","checkAnswer","nextQuestionNumber","Settings","Stack","createStackNavigator","screenOptions","animationEnabled","Pages","Navigator","headerMode","initialRouteName","Screen","options","name","component","SettingsPage","App"],"mappings":"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","file":"static/js/app.423bb2f4.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.d5818779.png\";","module.exports = __webpack_public_path__ + \"static/media/logo_dark.fcb399cb.png\";","import { Appearance } from \"react-native\";\n\nexport const themes = [\"default\", \"dark\"] as const;\n\nexport const defaultThemeName: ThemeName =\n  Appearance.getColorScheme() === \"dark\" ? \"dark\" : \"default\";\n\nexport type ThemeName = typeof themes[number];\n","export const locales = [\n  {\n    key: \"en-GB\",\n    internationalName: \"English (GB)\",\n    localName: \"English (GB)\",\n  },\n  {\n    key: \"en-US\",\n    internationalName: \"English (US)\",\n    localName: \"English (US)\",\n  },\n  {\n    key: \"ru\",\n    internationalName: \"Russian\",\n    localName: \"Русский\",\n  },\n  {\n    key: \"fr\",\n    internationalName: \"French\",\n    localName: \"Française\",\n  },\n] as const;\n\nexport type Locale = typeof locales[number][\"key\"];\n","// Originally taken from https://github.com/trucknet-io/react-targem/blob/develop/src/utils/locale.ts\n\nimport { Locale } from \"src/config/locales\";\n\nexport function findLocale(\n  supportedLocales: Locale[],\n  locale: string\n): Locale | undefined {\n  if (supportedLocales.includes(locale as Locale)) {\n    return locale as Locale;\n  }\n  for (const localeToMatch of supportedLocales) {\n    if (localeToMatch.includes(locale.split(\"-\")[0])) {\n      return localeToMatch;\n    }\n  }\n  return undefined;\n}\n\nexport function getBrowserLocale(\n  supportedLocales: Locale[],\n  fallbackLocale: Locale\n): Locale {\n  let browserLocale: Locale | undefined;\n  if (typeof window !== \"undefined\" && window.navigator) {\n    const lang = window.navigator.language;\n    if (lang) {\n      browserLocale = findLocale(supportedLocales, lang);\n    }\n  }\n\n  return browserLocale || fallbackLocale;\n}\n","import React, { useContext } from \"react\";\nimport { defaultThemeName, ThemeName } from \"src/config/themes\";\nimport { Locale, locales } from \"src/config/locales\";\nimport { getBrowserLocale } from \"src/utils/locales\";\nimport AsyncStorage from \"@react-native-community/async-storage\";\n\nconst LOCAL_STORAGE_KEY = \"settings\";\n\nconst getRandomInt = (min: number, max: number) => {\n  return min + Math.floor(Math.random() * (max - min + 1));\n};\n\nconst getRandomName = () => {\n  // eslint-disable-next-line @typescript-eslint/no-var-requires\n  const names: string[] = require(\"./names.json\");\n\n  const name = names[getRandomInt(0, names.length - 1)];\n  return name;\n};\n\ninterface SettingsContextProviderState {\n  locale: Locale;\n  theme: ThemeName;\n  nickName: string;\n}\n\nexport interface SettingsContext extends SettingsContextProviderState {\n  setSettings: (state: Partial<SettingsContextProviderState>) => void;\n  resetSettings: () => void;\n}\n\nconst getInitialValues = (): SettingsContextProviderState => ({\n  theme: defaultThemeName,\n  locale: getBrowserLocale(\n    locales.map((l) => l.key),\n    locales[0].key\n  ),\n  nickName: getRandomName(),\n});\n\nconst SettingsContext = React.createContext<SettingsContext>({\n  ...getInitialValues(),\n  // eslint-disable-next-line @typescript-eslint/no-empty-function\n  setSettings: () => {},\n  // eslint-disable-next-line @typescript-eslint/no-empty-function\n  resetSettings: () => {},\n});\n\nexport class SettingsContextProvider extends React.PureComponent<\n  Partial<SettingsContextProviderState>,\n  SettingsContextProviderState\n> {\n  constructor(props: Partial<SettingsContext>) {\n    super(props);\n    this.state = {\n      ...getInitialValues(),\n    };\n    void this.updateSettingsWithPersistedValue();\n  }\n\n  public render(): React.ReactNode {\n    const { state, props } = this;\n\n    const providerValue = {\n      ...state,\n      ...props,\n      setSettings: this.setSettings,\n      resetSettings: this.resetSettings,\n    };\n\n    return (\n      <SettingsContext.Provider value={providerValue}>\n        {props.children}\n      </SettingsContext.Provider>\n    );\n  }\n\n  private setSettings = (settings: Partial<SettingsContextProviderState>) => {\n    this.setState((state: SettingsContextProviderState) => {\n      const newSettings = {\n        ...state,\n        ...settings,\n      };\n      void AsyncStorage.setItem(LOCAL_STORAGE_KEY, JSON.stringify(newSettings));\n      return newSettings;\n    });\n  };\n\n  private updateSettingsWithPersistedValue = async (): Promise<void> => {\n    const json = await this.getSettingsFromLocalStorage();\n    this.setState((state) => ({\n      ...state,\n      ...json,\n    }));\n  };\n\n  private getSettingsFromLocalStorage = async (): Promise<\n    Partial<SettingsContextProviderState>\n  > => {\n    const json = await AsyncStorage.getItem(LOCAL_STORAGE_KEY);\n\n    if (!json) {\n      return {};\n    }\n\n    return JSON.parse(json);\n  };\n\n  private resetSettings = () => {\n    this.setState(getInitialValues());\n  };\n}\n\nexport const useSettings = (): SettingsContext => useContext(SettingsContext);\n","import { QuestionWithAnswers } from \"../types\";\nimport { MOCK } from \"./GamePage.mock\";\n\ninterface BackendQuestion {\n  question: {\n    whatStatistics: string;\n    whatValue: string;\n    value: number;\n    correctAnswerIndex: number;\n    url: string;\n    answerUrl: string;\n  };\n  answers: { answerStatistics: string; answerValue: string }[];\n}\n\nexport const transformQuestion = (\n  q: BackendQuestion,\n  i: number\n): QuestionWithAnswers => {\n  return {\n    question: {\n      whatStatistics: q.question.whatStatistics,\n      whatValue: q.question.whatValue,\n      value: q.question.value,\n      imgSrc: `https://source.unsplash.com/random?quiz&version=${i}`,\n      correctAnswerId: q.question.correctAnswerIndex.toString(),\n      url: q.question.url,\n      answerUrl: q.question.answerUrl,\n    },\n    id: i.toString(),\n    answers: q.answers.map((a, id) => ({\n      answerStatistics: a.answerStatistics,\n      answerValue: a.answerValue,\n      id: id.toString(),\n    })),\n  };\n};\n\nexport const QUESTIONS_COUNT = 5;\n\nlet questionsCache: QuestionWithAnswers[];\n\nexport const fetchQuestionByIndex = async (\n  index: number\n): Promise<QuestionWithAnswers> => {\n  return new Promise((resolve, reject) => {\n    if (index > QUESTIONS_COUNT) {\n      reject(\"No such question\");\n      return;\n    }\n    if (!questionsCache) {\n      questionsCache = MOCK.map(transformQuestion);\n    }\n    setTimeout(() => {\n      resolve(questionsCache[index]);\n    }, 1500);\n  });\n};\n\n// eslint-disable-next-line\nexport const checkQuestion = async (\n  questionId: string\n): Promise<{ correctAnswerId: string }> => {\n  const question = questionsCache.find((q) => q.id === questionId);\n  if (!question) {\n    throw new Error(\"No such question\");\n  }\n  return {\n    correctAnswerId: question.question.correctAnswerId,\n  };\n};\n","import { StatusBar } from \"expo-status-bar\";\nimport React from \"react\";\nimport { TargemProvider } from \"react-targem\";\n// eslint-disable-next-line @typescript-eslint/ban-ts-comment\n// @ts-ignore\nimport translations from \"src/i18n/translations.json\";\nimport {\n  Provider as PaperProvider,\n  DarkTheme,\n  DefaultTheme,\n} from \"react-native-paper\";\nimport {\n  SettingsContextProvider,\n  useSettings,\n} from \"src/contexts/SettingsContext\";\nimport \"react-native-gesture-handler\";\nimport { NavigationContainer } from \"@react-navigation/native\";\nimport { SafeAreaProvider } from \"react-native-safe-area-context\";\n\nconst AppLayoutInternal: React.FC<AppLayoutInternalProps> = ({\n  children,\n}: AppLayoutInternalProps) => {\n  const { locale, theme } = useSettings();\n\n  return (\n    <SafeAreaProvider>\n      <PaperProvider theme={theme === \"dark\" ? DarkTheme : DefaultTheme}>\n        <NavigationContainer>\n          <TargemProvider locale={locale} translations={translations}>\n            {children}\n            <StatusBar style=\"auto\" />\n          </TargemProvider>\n        </NavigationContainer>\n      </PaperProvider>\n    </SafeAreaProvider>\n  );\n};\ninterface AppLayoutInternalProps extends React.PropsWithChildren<{}> {}\n\nconst AppLayout: React.FC<AppLayoutProps> = ({ children }: AppLayoutProps) => (\n  <SettingsContextProvider>\n    <AppLayoutInternal>{children}</AppLayoutInternal>\n  </SettingsContextProvider>\n);\n\ninterface AppLayoutProps extends React.PropsWithChildren<{}> {}\n\nexport default AppLayout;\n","import React from \"react\";\nimport { locales, Locale } from \"src/config/locales\";\nimport { useSettings } from \"src/contexts/SettingsContext\";\nimport { Button, DefaultTheme, Menu } from \"react-native-paper\";\nimport { StyleProp, ViewStyle } from \"react-native\";\nimport { T } from \"react-targem\";\n\nconst LocalSelector: React.FC<LocalSelectorProps> = ({\n                                                       buttonStyle,\n                                                       theme,\n                                                     }: LocalSelectorProps) => {\n  const { setSettings } = useSettings();\n  const handleLocaleChange = (localeKey: Locale) => () => {\n    setSettings({\n      locale: localeKey,\n    });\n    closeMenu();\n  };\n\n  const [visible, setVisible] = React.useState(false);\n  const openMenu = () => setVisible(true);\n  const closeMenu = () => setVisible(false);\n\n  return (\n    <Menu\n      visible={visible}\n      onDismiss={closeMenu}\n      anchor={\n        <Button\n          style={buttonStyle}\n          mode=\"outlined\"\n          theme={theme}\n          onPress={openMenu}\n        >\n          <T message=\"Choose language\"/>\n        </Button>\n      }\n    >\n      {locales.map((l) => (\n        <Menu.Item\n          key={l.key}\n          onPress={handleLocaleChange(l.key)}\n          title={\n            <>\n              {l.localName} ({l.internationalName})\n            </>\n          }\n        />\n      ))}\n    </Menu>\n  );\n};\n\ninterface LocalSelectorProps {\n  buttonStyle: StyleProp<ViewStyle>;\n  theme: Object\n}\n\nexport default LocalSelector;\n","import { Linking, Platform } from \"react-native\";\n\nexport const openLinkInNewTab = async (url: string) => {\n  if (Platform.OS === \"web\") {\n    return window.open(url, \"_blank\");\n  }\n  await Linking.openURL(url);\n};\n","import { StyleSheet } from \"react-native\";\n\nexport default StyleSheet.create({\n  text: {\n    marginRight: 5,\n  },\n  switchContainer: {\n    flexDirection: \"row\",\n    alignItems: \"center\",\n    justifyContent: \"space-between\",\n  },\n});\n","import React from \"react\";\nimport { View } from \"react-native\";\nimport { Paragraph, Switch } from \"react-native-paper\";\nimport { T, useLocale } from \"react-targem\";\nimport { useSettings } from \"src/contexts/SettingsContext\";\nimport styles from \"./ThemeToggler.styles\";\n\nconst ThemeToggler: React.FC<ThemeTogglerProps> = ({ withText = true }: ThemeTogglerProps) => {\n  const { theme, setSettings } = useSettings();\n  const handleThemeChange = (isDark: boolean) => {\n    setSettings({ theme: isDark ? \"dark\" : \"default\" });\n  };\n\n  const { t } = useLocale();\n\n  return (\n    <View style={styles.switchContainer}>\n      {withText && <Paragraph style={styles.text}>\n        <T message=\"Dark theme?\"/>\n      </Paragraph>}\n      <Switch\n        trackColor=\"#001100\"\n        accessibilityRole=\"switch\"\n        accessibilityLabel={t(\"Toggle dark theme\")}\n        value={theme === \"dark\"}\n        onValueChange={handleThemeChange}\n      />\n    </View>\n\n  );\n};\n\ninterface ThemeTogglerProps {\n  withText?: boolean\n}\n\nexport default ThemeToggler;\n","import { StyleSheet } from \"react-native\";\n\nexport default StyleSheet.create({\n  card: {\n    width: \"100%\",\n    height: \"100%\",\n    borderRadius: 0,\n    backgroundColor: \"#625772\",\n    position: \"relative\",\n  },\n  cardContent: {\n    alignItems: \"center\",\n    position: \"relative\",\n    display: \"flex\",\n    justifyContent: \"center\",\n    height: \"100%\",\n  },\n  cardImageContainer: {\n    elevation: 8,\n    height: \"100%\",\n    position: \"absolute\",\n  },\n  buttonsContainer: {\n    marginTop: 200,\n    alignItems: \"center\",\n    position: \"relative\",\n    display: \"flex\",\n    justifyContent: \"center\",\n  },\n  linearGradient: {\n    width: \"100%\",\n    height: \"100%\",\n  },\n  cardImage: {\n    width: 370,\n    height: \"100%\",\n  },\n  cardTitle: {\n    marginTop: 64,\n    marginBottom: 64,\n    color: \"#fff\",\n  },\n  cardButton: {\n    marginBottom: 20,\n  },\n  themeToggler: {\n    position: \"absolute\",\n    top: \"14%\",\n    left: 165,\n  },\n});\n","import { StackNavigationProp } from \"@react-navigation/stack\";\nimport { LinearGradient } from \"expo-linear-gradient\";\nimport React from \"react\";\nimport { Image, Platform, View } from \"react-native\";\nimport { Button, Card } from \"react-native-paper\";\nimport { T } from \"react-targem\";\nimport LocalSelector from \"src/components/LocaleSelector\";\nimport { openLinkInNewTab } from \"src/utils/native\";\nimport ThemeToggler from \"../../components/ThemeToggler\";\nimport { useSettings } from \"../../contexts/SettingsContext\";\nimport { RootStackRoute, RootStackRoutes } from \"../types\";\nimport logo from \"./assets/logo.png\";\nimport darkLogo from \"./assets/logo_dark.png\";\nimport styles from \"./HomePage.styles\";\n\nconst MOBILE_APPLICATION_LINK = \"https://expo.io/@ohm-team/lquiz-client\";\n\nconst getButtonTheme = (isDarkTheme: boolean) => {\n  return isDarkTheme ? {\n      colors: {\n        primary: \"#a3d3cf\",\n      },\n    } :\n    {\n      colors: {\n        primary: \"#322c3c\",\n      },\n    };\n\n};\nconst getGradientColors = (isDarkTheme: boolean): string[] => {\n  return isDarkTheme ?\n    [\"#625772\", \"#9585ae\", \"#322c3c\"] :\n    [\"#9585ae\", \"#c6b1e7\", \"#e3fff3\"];\n};\nconst HomePage: React.FC<HomePageProps> = ({ navigation }: HomePageProps) => {\n  const { theme } = useSettings();\n  const isDarkTheme = theme === \"dark\";\n  const handleLinkButtonClick = (\n    routeName: RootStackRoute,\n    args?: any,\n  ) => () => {\n    navigation.navigate(routeName, args);\n  };\n\n  const handleDownloadButtonClick = () => {\n    openLinkInNewTab(MOBILE_APPLICATION_LINK);\n  };\n\n  return (\n    <Card style={styles.card}>\n      <LinearGradient\n        colors={getGradientColors(isDarkTheme)}\n        locations={[0, 0.18, 1]}\n        style={styles.linearGradient}\n      >\n        <Card.Content style={styles.cardContent}>\n          <View style={styles.cardImageContainer}>\n            <Image source={isDarkTheme ? logo:darkLogo} style={styles.cardImage}/>\n            <View style={styles.themeToggler}>\n              <ThemeToggler withText={false}/>\n            </View>\n          </View>\n\n          <View style={styles.buttonsContainer}>\n            <Button\n              mode=\"contained\"\n              theme={getButtonTheme(isDarkTheme)}\n              onPress={handleLinkButtonClick(\"Game\")}\n              style={styles.cardButton}\n            >\n              <T message=\"Play\"/>\n            </Button>\n            <Button\n              mode=\"outlined\"\n              theme={getButtonTheme(isDarkTheme)}\n              onPress={handleLinkButtonClick(\"Rules\")}\n              style={styles.cardButton}\n            >\n              <T message=\"Rules\"/>\n            </Button>\n\n            {Platform.OS === \"web\" ? (\n              <Button\n                mode=\"outlined\"\n                theme={getButtonTheme(isDarkTheme)}\n                onPress={handleDownloadButtonClick}\n                style={styles.cardButton}\n              >\n                <T message=\"Download an app\"/>\n              </Button>\n            ) : null}\n            <LocalSelector buttonStyle={styles.cardButton} theme={getButtonTheme(isDarkTheme)}/>\n          </View>\n        </Card.Content>\n      </LinearGradient>\n    </Card>\n  );\n};\n\ninterface HomePageProps {\n  navigation: StackNavigationProp<RootStackRoutes, \"Home\">;\n}\n\nexport default HomePage;\n","import { StyleSheet } from \"react-native\";\n\nexport default StyleSheet.create({\n  container: {\n    flex: 1,\n    justifyContent: \"center\",\n    minHeight: \"100%\",\n  },\n  card: {\n    alignSelf: \"center\",\n    minHeight: \"100%\",\n    minWidth: \"100%\",\n    padding: 20,\n    borderRadius: 0,\n  },\n  content: {\n    marginTop: 20,\n  },\n  header: {\n    fontSize: 30,\n    lineHeight: 30,\n    marginBottom: 20,\n    marginTop: 20,\n  },\n  text: {\n    fontSize: 15,\n    lineHeight: 20,\n  },\n});\n","import { StackNavigationProp } from \"@react-navigation/stack\";\nimport React from \"react\";\nimport { Button, Card, Paragraph, Avatar } from \"react-native-paper\";\nimport { T } from \"react-targem\";\nimport { RootStackRoute, RootStackRoutes } from \"../types\";\nimport styles from \"./RulesPage.styles\";\nimport { SafeAreaView } from \"react-native-safe-area-context\";\nimport { ScrollView } from \"react-native\";\n\nconst LeftContent: React.FC<CardTitleAddon> = (props: CardTitleAddon) => (\n  <Avatar.Text {...props} label=\"R\" />\n);\n\ninterface CardTitleAddon {\n  size: number;\n}\n\nconst RulesPage: React.FC<RulesPageProps> = ({\n  navigation,\n}: RulesPageProps) => {\n  const handleLinkButtonClick = (routeName: RootStackRoute) => () => {\n    navigation.navigate(routeName);\n  };\n\n  const RightAddon = () => (\n    <Button mode=\"outlined\" onPress={handleLinkButtonClick(\"Home\")}>\n      <T message=\"Home\" />\n    </Button>\n  );\n\n  return (\n    <ScrollView contentContainerStyle={styles.container}>\n      <Card style={styles.card}>\n        <SafeAreaView>\n          <Card.Title\n            title={<T message=\"Rules\" />}\n            left={LeftContent}\n            right={RightAddon}\n          />\n          <Card.Content style={styles.content}>\n            <Paragraph style={styles.text}>\n              <T message=\"Within one game, the user is assigned 15 questions.\" />\n            </Paragraph>\n            <Paragraph>\n              <T message=\"Points are awarded for each correct answer (quiz coins)\" />\n            </Paragraph>\n            <Paragraph>\n              <T message=\"After passing all the questions, the general stratistics of the user is formed.\" />\n            </Paragraph>\n          </Card.Content>\n        </SafeAreaView>\n      </Card>\n    </ScrollView>\n  );\n};\n\ninterface RulesPageProps {\n  navigation: StackNavigationProp<RootStackRoutes, \"Rules\">;\n}\n\nexport default RulesPage;\n","import { StyleSheet } from \"react-native\";\n\nexport default StyleSheet.create({\n  card: {\n    height: \"100%\",\n    width: \"100%\",\n    borderRadius: 0,\n  },\n  buttonsContainer: {\n    display: \"flex\",\n    flexWrap: \"wrap\",\n    justifyContent: \"center\",\n  },\n  button: {\n    marginTop: 16,\n    marginBottom: 16,\n    paddingTop: 16,\n    paddingBottom: 16,\n    minWidth: \"90%\",\n  },\n  title: {\n    marginTop: 32,\n    marginBottom: 8,\n  },\n});\n","/* eslint-disable react/prop-types */\nimport React from \"react\";\nimport { T } from \"react-targem\";\nimport { Button, Card, Title, Avatar, Text } from \"react-native-paper\";\nimport { ProgressBar, Colors } from \"react-native-paper\";\nimport styles from \"./GameOverPage.styles\";\nimport { openLinkInNewTab } from \"src/utils/native\";\nimport { RootStackRoute } from \"../types\";\n\nconst LeftContent: React.FC<CardTitleAddon> = (props: CardTitleAddon) => (\n  <Avatar.Text {...props} label=\"G\" />\n);\n\ninterface CardTitleAddon {\n  size: number;\n}\n\nconst GameOverPage: React.FC<GameOverPageProps> = ({\n  facebookShareMessage,\n  facebookShareURL,\n  userStatus,\n  pace,\n  accuracy,\n  correctAnswered,\n  totalAnswered,\n  paceStatus,\n  goto,\n}) => {\n  const RightContent: React.FC<CardTitleAddon> = () => (\n    <div style={{ display: \"flex\", flexDirection: \"row\" }}>\n      <Button mode=\"outlined\" onPress={postOnFacebook}>\n        <T message=\"Share\" />\n      </Button>\n      <Button onPress={goto(\"Home\")}>\n        <T message=\"Home\" />\n      </Button>\n    </div>\n  );\n  const postOnFacebook = () => {\n    const facebookParameters = [\n      [\"u\", facebookShareURL],\n      [\"quote\", facebookShareMessage],\n    ]\n      .map(([key, value]) => `${key}=${encodeURI(value)}`)\n      .join(\"&\");\n    const url = `https://www.facebook.com/sharer/sharer.php?${facebookParameters}`;\n    openLinkInNewTab(url);\n  };\n  return (\n    <Card style={styles.card}>\n      <Card.Title title={userStatus} left={LeftContent} right={RightContent} />\n      <Card.Cover\n        accessible={false}\n        source={{ uri: \"https://source.unsplash.com/random?finish\" }}\n      />\n      <Card.Content>\n        <Title style={styles.title}>\n          <T message=\"Statistics\" />:\n        </Title>\n        <Text>\n          <T message=\"accuracy\" />: {accuracy * 100}% ({correctAnswered}/\n          {totalAnswered})\n        </Text>\n        <ProgressBar progress={accuracy} color={Colors.red800} />\n        <br />\n        <Text>\n          <T message=\"pace\" />: {pace} <T message=\"seconds per question\" />\n        </Text>\n        <ProgressBar progress={paceStatus} color={Colors.green800} />\n      </Card.Content>\n    </Card>\n  );\n};\n\ninterface GameOverPageProps {\n  facebookShareMessage: string;\n  facebookShareURL: string;\n  /** статус присваиваемый пользователю по результатам конкретного опроса */\n  userStatus: string;\n  pace: number;\n  accuracy: number;\n  correctAnswered: number;\n  totalAnswered: number;\n  paceStatus: number;\n  goto(routeName: RootStackRoute): () => void;\n}\n\nexport default GameOverPage;\n","/* eslint-disable react/prop-types */\nimport React from \"react\";\nimport { StackNavigationProp } from \"@react-navigation/stack\";\nimport { RouteProp } from \"@react-navigation/native\";\nimport GameOverPage from \"./GameOverPage\";\nimport { RootStackRoute, RootStackRoutes } from \"../types\";\n\nconst facebookShareURL = \"https://ohm-team.github.io/lquiz-client/\";\n\nconst GameOverPageContainer: React.FC<GameOverPageContainerProps> = ({\n  navigation,\n  route: { params },\n}) => {\n  const { gameResults, gamePace } = params;\n\n  const pace =\n    Math.round((gamePace.reduce((v, a) => v + a, 0) / gamePace.length) * 10) /\n    10;\n  const paceAvg = 20;\n  const totalAnswered = gameResults.length;\n  const correctAnswered = gameResults.filter(Boolean).length;\n  const accuracy = Math.round((100 * correctAnswered) / totalAnswered) / 100;\n  const paceStatus = Math.round((100 * pace) / paceAvg) / 100;\n  const facebookShareMessage = `My Luxembourg knoweledge is ${correctAnswered}/${totalAnswered}. Try it out to test your skills!`;\n  const goto = (routeName: RootStackRoute) => () => {\n    navigation.navigate(routeName);\n  };\n\n  const props = {\n    facebookShareMessage,\n    facebookShareURL,\n    accuracy,\n    userStatus: \"Game finished\",\n    paceStatus,\n    pace,\n    totalAnswered,\n    correctAnswered,\n    goto,\n  };\n\n  return <GameOverPage {...props} />;\n};\n\nexport default GameOverPageContainer;\n\ninterface GameOverPageContainerProps {\n  navigation: StackNavigationProp<RootStackRoutes, \"GameOver\">;\n  route: RouteProp<RootStackRoutes, \"GameOver\">;\n}\n","import { StyleSheet } from \"react-native\";\n\nexport default StyleSheet.create({\n  card: {\n    minHeight: \"100%\",\n    overflow: \"visible\",\n    width: \"100%\",\n    borderRadius: 0,\n  },\n  container: {\n    flex: 1,\n    justifyContent: \"center\",\n    minHeight: \"100%\",\n  },\n  buttonsContainer: {\n    display: \"flex\",\n    flexWrap: \"wrap\",\n    justifyContent: \"center\",\n    marginBottom: 32,\n  },\n  coverContainer: {\n    position: \"relative\",\n  },\n  coverButtonContainer: {\n    position: \"absolute\",\n    top: 0,\n    right: 0,\n    left: 0,\n    bottom: 0,\n    justifyContent: \"center\",\n    alignItems: \"center\",\n    backgroundColor: \"rgba(0, 0, 0, 0.7)\",\n  },\n  nextQuestionButton: {\n    paddingHorizontal: 20,\n    paddingVertical: 10,\n  },\n  title: {\n    marginTop: 5,\n    textAlign: \"center\",\n    marginBottom: 0,\n  },\n  titleStatistics: {\n    marginTop: 16,\n    fontSize: 15,\n    textAlign: \"center\",\n    fontStyle: \"italic\",\n    marginBottom: 0,\n  },\n  sourceLinksContainer: {\n    position: \"absolute\",\n    bottom: 0,\n    backgroundColor: \"rgba(255,255,255,.7)\",\n    borderRadius: 5,\n    paddingLeft: 10,\n    paddingRight: 10,\n    display: \"flex\",\n    justifyContent: \"flex-end\",\n    flexDirection: \"row\",\n    alignItems: \"center\",\n    marginBottom: 20,\n  },\n  titleValue: {\n    fontWeight: \"bold\",\n    fontSize: 22,\n  },\n});\n","import { StyleSheet } from \"react-native\";\n\nexport default StyleSheet.create({\n  button: {\n    marginTop: 10,\n    marginBottom: 10,\n    minWidth: \"90%\",\n    maxWidth: \"100%\",\n  },\n  buttonContent: {\n    minHeight: 55,\n  },\n  statistics: {\n    fontStyle: \"italic\",\n  },\n  value: {},\n});\n","import React from \"react\";\nimport { Text } from \"react-native\";\nimport { Button } from \"react-native-paper\";\nimport styles from \"./GamePageAnswer.styles\";\n\nconst successTheme = {\n  colors: {\n    primary: \"#8BC34A\",\n  },\n};\n\nconst warningTheme = {\n  colors: {\n    primary: \"#FF5722\",\n  },\n};\n\nconst GamePageAnswer: React.FC<GamePageAnswerProps> = ({\n  onAnswerClick,\n  id,\n  answerStatistics,\n  answerValue,\n  isLoading,\n  isAnyQuestionLoading,\n  isSelected,\n  isCorrectAnswer,\n  isAnswerRevealed,\n}: GamePageAnswerProps) => {\n  const handleAnswerClick = () => {\n    onAnswerClick(id);\n  };\n\n  const getTheme = () => {\n    if (isCorrectAnswer === true) {\n      return successTheme;\n    }\n\n    if (!isSelected || isAnyQuestionLoading) {\n      return undefined;\n    }\n\n    return warningTheme;\n  };\n\n  return (\n    <Button\n      onPress={!isAnswerRevealed ? handleAnswerClick : undefined}\n      style={styles.button}\n      contentStyle={styles.buttonContent}\n      mode=\"contained\"\n      disabled={\n        isAnyQuestionLoading ||\n        (isAnswerRevealed && !isSelected && !isCorrectAnswer)\n      }\n      loading={isLoading}\n      theme={getTheme()}\n    >\n      {isLoading ? null : (\n        <>\n          <Text style={styles.value}>{answerValue}</Text>{\" \"}\n          <Text style={styles.statistics}>{answerStatistics}</Text>\n        </>\n      )}\n    </Button>\n  );\n};\n\ninterface GamePageAnswerProps {\n  id: string;\n  onAnswerClick: (answerId: string) => void;\n  answerStatistics: string;\n  answerValue: string;\n  isLoading: boolean;\n  isAnyQuestionLoading: boolean;\n  isAnswerRevealed: boolean;\n  isSelected: boolean;\n  isCorrectAnswer: boolean;\n}\n\nexport default GamePageAnswer;\n","import React from \"react\";\nimport { ScrollView, View } from \"react-native\";\nimport {\n  Avatar,\n  Button,\n  Card,\n  ProgressBar,\n  Text,\n  Title,\n} from \"react-native-paper\";\nimport { SafeAreaView } from \"react-native-safe-area-context\";\nimport { T } from \"react-targem\";\nimport ThemeToggler from \"../../components/ThemeToggler\";\nimport { Answer, Question } from \"../types\";\nimport styles from \"./GamePage.styles\";\nimport GamePageAnswer from \"./GamePageAnswer\";\nimport { openLinkInNewTab } from \"src/utils/native\";\n\nconst LeftContent: React.FC<CardTitleAddon> = (props: CardTitleAddon) => (\n  <Avatar.Text {...props} label=\"Q\"/>\n);\n\ninterface CardTitleAddon {\n  size: number;\n}\n\nconst GamePage: React.FC<GamePageProps> = ({\n                                             totalQuestionsCount,\n                                             currentQuestionNumber,\n                                             question,\n                                             answers,\n                                             isQuestionLoading,\n                                             onBackButtonClick,\n                                             onAnswerClick,\n                                             questionLoadingId,\n                                             correctAnswerId,\n                                             selectedAnswerId,\n                                             isNextButtonVisible,\n                                             onNextButtonClick,\n                                           }: GamePageProps) => {\n  const RightContent: React.FC<CardTitleAddon> = (props: CardTitleAddon) => (\n    <View style={{ display: \"flex\", flexDirection: \"row\", alignItems: \"center\" }}>\n      <ThemeToggler/>\n      <Button onPress={onBackButtonClick}>\n        <T message=\"Back\"/>\n      </Button>\n    </View>\n  );\n\n  const handleQuestionSourceLinkClick = () => {\n    openLinkInNewTab(question!.url);\n  };\n\n  const handleAnswerSourceLinkClick = () => {\n    openLinkInNewTab(question!.answerUrl);\n  };\n\n  const [whatStart, whatEnd] = (question?.whatValue || \"\").split(\"{value}\");\n\n  return (\n    <ScrollView contentContainerStyle={styles.container}>\n      <Card style={styles.card}>\n        <SafeAreaView>\n          <Card.Title\n            title={\n              <>\n                <T message={\"Quiz question\"}/>\n              </>\n            }\n            subtitle={\n              <>\n                {currentQuestionNumber} <T message=\"out of\"/>{\" \"}\n                {totalQuestionsCount}\n              </>\n            }\n            left={LeftContent}\n            right={RightContent}\n          />\n\n          {isQuestionLoading ? <ProgressBar indeterminate/> : null}\n          {question ? (\n            <>\n              <View style={styles.coverContainer}>\n                <Card.Cover\n                  accessible={false}\n                  source={{\n                    uri: question.imgSrc,\n                  }}\n                />\n\n                {isNextButtonVisible ? (\n                  <View style={styles.coverButtonContainer}>\n                    <Button\n                      style={styles.nextQuestionButton}\n                      mode=\"contained\"\n                      onPress={onNextButtonClick}\n                    >\n                      <T message=\"Next question!\"/>\n                    </Button>\n                    <View style={styles.sourceLinksContainer}>\n                      <Button onPress={handleQuestionSourceLinkClick}>\n                        <T message=\"Question source\"/>\n                      </Button>\n                      <Button onPress={handleAnswerSourceLinkClick}>\n                        <T message=\"Answer source\"/>\n                      </Button>\n                    </View>\n                  </View>\n                ) : null}\n              </View>\n              <Card.Content>\n                <Title style={styles.titleStatistics}>\n                  {question.whatStatistics}\n                </Title>\n                <Title style={styles.title}>\n                  {whatStart}\n                  <Text style={styles.titleValue}>{question.value}</Text>\n                  {whatEnd}.{\" \"}\n                  <T message=\"What else do you think my contain number\"/>{\" \"}\n                  <Text style={styles.titleValue}>\n                    {question.value.toString()}\n                  </Text>\n                  ?\n                </Title>\n              </Card.Content>\n            </>\n          ) : null}\n          {answers ? (\n            <Card.Actions style={styles.buttonsContainer}>\n              {answers.map((a) => (\n                <GamePageAnswer\n                  key={a.id}\n                  onAnswerClick={onAnswerClick}\n                  isLoading={questionLoadingId === a.id}\n                  isAnyQuestionLoading={questionLoadingId !== undefined}\n                  isSelected={selectedAnswerId === a.id}\n                  isCorrectAnswer={a.id === correctAnswerId}\n                  isAnswerRevealed={isNextButtonVisible}\n                  {...a}\n                />\n              ))}\n            </Card.Actions>\n          ) : null}\n        </SafeAreaView>\n      </Card>\n    </ScrollView>\n  );\n};\n\ninterface GamePageProps {\n  currentQuestionNumber: number;\n  totalQuestionsCount: number;\n  isQuestionLoading: boolean;\n  questionLoadingId?: string;\n  correctAnswerId?: string;\n  selectedAnswerId?: string;\n  isNextButtonVisible: boolean;\n  question?: Question | null;\n  answers?: Answer[] | null;\n  onBackButtonClick: () => void;\n  onAnswerClick: (answerId: string) => void;\n  onNextButtonClick: () => void;\n}\n\nexport default GamePage;\n","// eslint-disable-next-line @typescript-eslint/no-var-requires\nexport const MOCK = require(\"./questions.json\").questions;\n","import { StackNavigationProp } from \"@react-navigation/stack\";\nimport React, { useEffect, useState } from \"react\";\nimport { QuestionWithAnswers, RootStackRoute, RootStackRoutes } from \"../types\";\nimport GamePage from \"./GamePage\";\nimport {\n  checkQuestion,\n  fetchQuestionByIndex,\n  QUESTIONS_COUNT,\n} from \"./GamePage.service\";\n\nconst GamePageContainer: React.FC<GamePageContainerProps> = ({\n  navigation,\n}: GamePageContainerProps) => {\n  const [currentQuestionNumber, setCurrentQuestionNumber] = useState<number>(0);\n  const [currentQuestion, setCurrentQuestion] = useState<\n    QuestionWithAnswers | undefined\n  >(undefined);\n  const [correctAnswerId, setCorrectAnswerId] = useState<string | undefined>(\n    undefined\n  );\n  const [selectedAnswerId, setSelectedAnswerId] = useState<\n    string | undefined\n  >();\n  const [isQuestionLoading, setIsQuestionLoading] = useState<boolean>(false);\n  const [stats, setStats] = useState<Stats>();\n\n  async function fetchData(questionNumber: number) {\n    setIsQuestionLoading(true);\n    const question = await fetchQuestionByIndex(questionNumber);\n    setIsQuestionLoading(false);\n    setCurrentQuestion(question);\n  }\n\n  async function checkAnswer(selectedAnswerId: string) {\n    if (!currentQuestion) {\n      throw new Error(\"There is no current question\");\n    }\n    const { correctAnswerId } = await checkQuestion(currentQuestion.id);\n    setCorrectAnswerId(correctAnswerId);\n    setStats((stats) => {\n      const ended = [...(stats?.ended || [])];\n      const isCorrect = [...(stats?.isCorrect || [])];\n      ended[currentQuestionNumber] = Date.now();\n      isCorrect[currentQuestionNumber] = correctAnswerId === selectedAnswerId;\n      return { ...(stats || {}), ended, isCorrect };\n    });\n  }\n\n  useEffect(() => {\n    setStats((stats) => {\n      const started = [...(stats?.started || [])];\n      started[currentQuestionNumber] = Date.now();\n      return { ...(stats || {}), started };\n    });\n    fetchData(currentQuestionNumber);\n  }, [currentQuestionNumber]);\n\n  const handleLinkButtonClick = (routeName: RootStackRoute) => () => {\n    navigation.navigate(routeName);\n  };\n\n  const handleAnswerClick = (id: string) => {\n    setSelectedAnswerId(id);\n    checkAnswer(id);\n  };\n\n  const handleNextButtonClick = () => {\n    const nextQuestionNumber = currentQuestionNumber + 1;\n    if (nextQuestionNumber === QUESTIONS_COUNT) {\n      if (!stats) throw new Error(\"no stats\");\n      if (!stats.started) throw new Error(\"no stats for started\");\n      if (!stats.ended) throw new Error(\"no stats for ended\");\n      if (!stats.isCorrect) throw new Error(\"no stats from isCorrect\");\n      const gamePace = stats.started.map((started, index) => {\n        const ended = stats.ended![index];\n        return Math.round((ended - started) / 100) / 10;\n      });\n      navigation.navigate(\"GameOver\", {\n        gameResults: stats.isCorrect,\n        gamePace,\n      });\n      return;\n    }\n    setCorrectAnswerId(undefined);\n    setSelectedAnswerId(undefined);\n    setCurrentQuestion(undefined);\n    setCurrentQuestionNumber(nextQuestionNumber);\n  };\n\n  return (\n    <GamePage\n      currentQuestionNumber={currentQuestionNumber + 1}\n      isQuestionLoading={isQuestionLoading}\n      question={currentQuestion?.question}\n      answers={currentQuestion?.answers}\n      totalQuestionsCount={QUESTIONS_COUNT}\n      correctAnswerId={correctAnswerId}\n      onBackButtonClick={handleLinkButtonClick(\"Home\")}\n      onAnswerClick={handleAnswerClick}\n      selectedAnswerId={selectedAnswerId}\n      isNextButtonVisible={Boolean(correctAnswerId)}\n      onNextButtonClick={handleNextButtonClick}\n    />\n  );\n};\n\ninterface GamePageContainerProps {\n  navigation: StackNavigationProp<RootStackRoutes, \"Game\">;\n}\n\ninterface Stats {\n  started?: number[];\n  ended?: number[];\n  isCorrect?: boolean[];\n}\n\nexport default GamePageContainer;\n","import { StyleSheet } from \"react-native\";\n\nexport default StyleSheet.create({\n  container: {\n    alignSelf: \"center\",\n    minHeight: \"100%\",\n    minWidth: \"100%\",\n    padding: 20,\n    borderRadius: 0,\n  },\n  content: {\n    marginTop: 20,\n  },\n  switchContainer: {\n    flexDirection: \"row\",\n    justifyContent: \"space-between\",\n  },\n});\n","import { StackNavigationProp } from \"@react-navigation/stack\";\nimport React from \"react\";\nimport { Avatar, Button, Card } from \"react-native-paper\";\nimport { SafeAreaView } from \"react-native-safe-area-context\";\nimport { T } from \"react-targem\";\nimport ThemeToggler from \"../../components/ThemeToggler\";\nimport { RootStackRoute, RootStackRoutes } from \"../types\";\nimport styles from \"./Settings.styles\";\n\nconst LeftContent: React.FC<CardTitleAddon> = (props: CardTitleAddon) => (\n  <Avatar.Text {...props} label=\"S\" />\n);\n\ninterface CardTitleAddon {\n  size: number;\n}\n\nconst Settings: React.FC<SettingsProps> = ({ navigation }: SettingsProps) => {\n\n  const handleLinkButtonClick = (routeName: RootStackRoute) => () => {\n    navigation.navigate(routeName);\n  };\n\n  const RightAddon = () => (\n    <Button mode=\"outlined\" onPress={handleLinkButtonClick(\"Home\")}>\n      <T message=\"Home\" />\n    </Button>\n  );\n\n  return (\n    <Card style={styles.container}>\n      <SafeAreaView>\n        <Card.Title\n          title={<T message=\"Settings\" />}\n          left={LeftContent}\n          right={RightAddon}\n        />\n        <Card.Content style={styles.content}>\n         <ThemeToggler/>\n        </Card.Content>\n      </SafeAreaView>\n    </Card>\n  );\n};\ninterface SettingsProps {\n  navigation: StackNavigationProp<RootStackRoutes, \"Settings\">;\n}\n\nexport default Settings;\n","import { createStackNavigator } from \"@react-navigation/stack\";\nimport React from \"react\";\nimport HomePage from \"./HomePage\";\nimport RulesPage from \"./RulesPage\";\nimport GameOverPage from \"./GameOverPage\";\nimport GamePage from \"./GamePage\";\nimport SettingsPage from \"./SettingsPage\";\n\nconst Stack = createStackNavigator();\n\nconst screenOptions = { animationEnabled: true };\n\nconst Pages: React.FC<HomePageProps> = () => {\n  return (\n    <Stack.Navigator headerMode=\"none\" initialRouteName=\"Home\">\n      <Stack.Screen options={screenOptions} name=\"Home\" component={HomePage} />\n      <Stack.Screen\n        options={screenOptions}\n        name=\"Rules\"\n        component={RulesPage}\n      />\n      <Stack.Screen\n        options={screenOptions}\n        name=\"GameOver\"\n        component={GameOverPage}\n      />\n      <Stack.Screen options={screenOptions} name=\"Game\" component={GamePage} />\n      <Stack.Screen\n        options={screenOptions}\n        name=\"Settings\"\n        component={SettingsPage}\n      />\n    </Stack.Navigator>\n  );\n};\ninterface HomePageProps {}\n\nexport default Pages;\n","import React from \"react\";\nimport AppLayout from \"./src/components/AppLayout\";\nimport Pages from \"./src/pages\";\n\nconst App: React.FC = () => {\n  return (\n    <AppLayout>\n      <Pages />\n    </AppLayout>\n  );\n};\n\nexport default App;\n"],"sourceRoot":""}