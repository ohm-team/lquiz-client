{"version":3,"sources":["src/pages/HomePage/assets/logo.png","src/config/locales.ts","src/utils/locales.ts","src/contexts/SettingsContext/SettingsContext.tsx","src/config/themes.ts","src/components/AppLayout/AppLayout.tsx","src/pages/HomePage/HomePage.styles.ts","src/components/LocaleSelector/LocaleSelector.tsx","src/pages/HomePage/HomePage.tsx","src/pages/RulesPage/RulesPage.styles.ts","src/pages/RulesPage/RulesPage.tsx","src/pages/GamePage/GamePage.styles.ts","src/pages/GamePage/GamePage.tsx","src/pages/GamePage/GamePageContainer.tsx","src/pages/index.tsx","App.tsx"],"names":["module","exports","locales","key","internationalName","localName","getBrowserLocale","supportedLocales","fallbackLocale","browserLocale","window","navigator","lang","language","locale","includes","localeToMatch","split","findLocale","getInitialValues","theme","map","l","SettingsContext","React","createContext","setSettings","resetSettings","SettingsContextProvider","props","settings","setState","state","newSettings","AsyncStorage","setItem","JSON","stringify","updateSettingsWithPersistedValue","a","async","getSettingsFromLocalStorage","json","getItem","parse","this","providerValue","Provider","value","children","PureComponent","useSettings","useContext","AppLayoutInternal","NavigationContainer","translations","StatusBar","style","AppLayout","StyleSheet","create","card","width","height","borderRadius","cardContent","alignItems","display","justifyContent","cardImageContainer","elevation","cardImage","cardTitle","marginTop","marginBottom","cardButton","LocalSelector","buttonStyle","useState","visible","setVisible","closeMenu","Menu","onDismiss","anchor","Button","mode","onPress","message","Item","localeKey","title","HomePage","navigation","handleLinkButtonClick","routeName","navigate","Card","styles","Content","Surface","Image","source","logo","Title","container","minHeight","minWidth","alignSelf","RulesPage","Paragraph","buttonsContainer","flexWrap","button","paddingTop","paddingBottom","flex","buttonSuccess","backgroundColor","LeftContent","Text","label","successTheme","colors","primary","warningTheme","GamePage","totalQuestionsCount","currentQuestionNumber","question","answers","isQuestionLoading","onBackButtonClick","onAnswerClick","questionLoadingId","correctAnswerId","incorrectAnswerId","subtitle","left","right","Cover","accessible","uri","ProgressBar","indeterminate","count","what","toLowerCase","where","Actions","id","answerId","disabled","undefined","loading","isCorrect","isIncorrect","Snackbar","GamePageContainer","console","log","Stack","createStackNavigator","Pages","Navigator","initialRouteName","headerMode","Screen","name","component","App"],"mappings":"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","file":"static/js/app.45119c4b.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5041783f.png\";","export const locales = [\n  {\n    key: \"en-GB\",\n    internationalName: \"English (GB)\",\n    localName: \"English (GB)\",\n  },\n  {\n    key: \"en-US\",\n    internationalName: \"English (US)\",\n    localName: \"English (US)\",\n  },\n  {\n    key: \"ru\",\n    internationalName: \"Russian\",\n    localName: \"Русский\",\n  },\n  {\n    key: \"fr\",\n    internationalName: \"French\",\n    localName: \"Française\",\n  },\n] as const;\n\nexport type Locale = typeof locales[number][\"key\"];\n","// Originally taken from https://github.com/trucknet-io/react-targem/blob/develop/src/utils/locale.ts\n\nimport { Locale } from \"src/config/locales\";\n\nexport function findLocale(\n  supportedLocales: Locale[],\n  locale: string\n): Locale | undefined {\n  if (supportedLocales.includes(locale as Locale)) {\n    return locale as Locale;\n  }\n  for (const localeToMatch of supportedLocales) {\n    if (localeToMatch.includes(locale.split(\"-\")[0])) {\n      return localeToMatch;\n    }\n  }\n  return undefined;\n}\n\nexport function getBrowserLocale(\n  supportedLocales: Locale[],\n  fallbackLocale: Locale\n): Locale {\n  let browserLocale: Locale | undefined;\n  if (typeof window !== \"undefined\" && window.navigator) {\n    const lang = window.navigator.language;\n    if (lang) {\n      browserLocale = findLocale(supportedLocales, lang);\n    }\n  }\n\n  return browserLocale || fallbackLocale;\n}\n","import React, { useContext } from \"react\";\nimport { defaultThemeName, ThemeName } from \"src/config/themes\";\nimport { Locale, locales } from \"src/config/locales\";\nimport { getBrowserLocale } from \"src/utils/locales\";\nimport AsyncStorage from \"@react-native-community/async-storage\";\n\nconst LOCAL_STORAGE_KEY = \"settings\";\n\ninterface SettingsContextProviderState {\n  locale: Locale;\n  theme: ThemeName;\n}\n\nexport interface SettingsContext extends SettingsContextProviderState {\n  setSettings: (state: Partial<SettingsContextProviderState>) => void;\n  resetSettings: () => void;\n}\n\nconst getInitialValues = (): SettingsContextProviderState => ({\n  theme: defaultThemeName,\n  locale: getBrowserLocale(\n    locales.map((l) => l.key),\n    locales[0].key\n  ),\n});\n\nconst SettingsContext = React.createContext<SettingsContext>({\n  ...getInitialValues(),\n  // eslint-disable-next-line @typescript-eslint/no-empty-function\n  setSettings: () => {},\n  // eslint-disable-next-line @typescript-eslint/no-empty-function\n  resetSettings: () => {},\n});\n\nexport class SettingsContextProvider extends React.PureComponent<\n  Partial<SettingsContextProviderState>,\n  SettingsContextProviderState\n> {\n  constructor(props: Partial<SettingsContext>) {\n    super(props);\n    this.state = {\n      ...getInitialValues(),\n    };\n\n    void this.updateSettingsWithPersistedValue();\n  }\n\n  public render(): React.ReactNode {\n    const { state, props } = this;\n\n    const providerValue = {\n      ...state,\n      ...props,\n      setSettings: this.setSettings,\n      resetSettings: this.resetSettings,\n    };\n\n    return (\n      <SettingsContext.Provider value={providerValue}>\n        {props.children}\n      </SettingsContext.Provider>\n    );\n  }\n\n  private setSettings = (settings: Partial<SettingsContextProviderState>) => {\n    this.setState((state: SettingsContextProviderState) => {\n      const newSettings = {\n        ...state,\n        ...settings,\n      };\n      void AsyncStorage.setItem(LOCAL_STORAGE_KEY, JSON.stringify(newSettings));\n      return newSettings;\n    });\n  };\n\n  private updateSettingsWithPersistedValue = async (): Promise<void> => {\n    const json = await this.getSettingsFromLocalStorage();\n    this.setState((state) => ({\n      ...state,\n      ...json,\n    }));\n  };\n\n  private getSettingsFromLocalStorage = async (): Promise<\n    Partial<SettingsContextProviderState>\n  > => {\n    const json = await AsyncStorage.getItem(LOCAL_STORAGE_KEY);\n\n    if (!json) {\n      return {};\n    }\n\n    return JSON.parse(json);\n  };\n\n  private resetSettings = () => {\n    this.setState(getInitialValues());\n  };\n}\n\nexport const useSettings = (): SettingsContext => useContext(SettingsContext);\n","export const themes = [\"default\", \"dark\"] as const;\n\nexport const defaultThemeName: ThemeName = \"default\";\n\nexport type ThemeName = typeof themes[number];\n","import { StatusBar } from \"expo-status-bar\";\nimport React from \"react\";\nimport { TargemProvider } from \"react-targem\";\n// eslint-disable-next-line @typescript-eslint/ban-ts-comment\n// @ts-ignore\nimport translations from \"src/i18n/translations.json\";\nimport { Provider as PaperProvider } from \"react-native-paper\";\nimport {\n  SettingsContextProvider,\n  useSettings,\n} from \"src/contexts/SettingsContext\";\nimport \"react-native-gesture-handler\";\nimport { NavigationContainer } from \"@react-navigation/native\";\n\nconst AppLayoutInternal: React.FC<AppLayoutInternalProps> = ({\n  children,\n}: AppLayoutInternalProps) => {\n  const { locale } = useSettings();\n\n  return (\n    <PaperProvider>\n      <NavigationContainer>\n        <TargemProvider locale={locale} translations={translations}>\n          {children}\n          <StatusBar style=\"auto\" />\n        </TargemProvider>\n      </NavigationContainer>\n    </PaperProvider>\n  );\n};\ninterface AppLayoutInternalProps extends React.PropsWithChildren<{}> {}\n\nconst AppLayout: React.FC<AppLayoutProps> = ({ children }: AppLayoutProps) => (\n  <SettingsContextProvider>\n    <AppLayoutInternal>{children}</AppLayoutInternal>\n  </SettingsContextProvider>\n);\n\ninterface AppLayoutProps extends React.PropsWithChildren<{}> {}\n\nexport default AppLayout;\n","import { StyleSheet } from \"react-native\";\n\nexport default StyleSheet.create({\n  card: {\n    width: \"100%\",\n    height: \"100%\",\n    borderRadius: 0,\n  },\n  cardContent: {\n    alignItems: \"center\",\n    display: \"flex\",\n    justifyContent: \"center\",\n    height: \"100%\",\n  },\n  cardImageContainer: {\n    elevation: 8,\n  },\n  cardImage: {\n    width: 200,\n    height: 200,\n  },\n  cardTitle: {\n    marginTop: 64,\n    marginBottom: 64,\n  },\n  cardButton: {\n    marginBottom: 32,\n  },\n});\n","import React from \"react\";\nimport { locales, Locale } from \"src/config/locales\";\nimport { useSettings } from \"src/contexts/SettingsContext\";\nimport { Button, Menu } from \"react-native-paper\";\nimport { StyleProp, ViewStyle } from \"react-native\";\nimport { T } from \"react-targem\";\n\nconst LocalSelector: React.FC<LocalSelectorProps> = ({\n  buttonStyle,\n}: LocalSelectorProps) => {\n  const { setSettings } = useSettings();\n  const handleLocaleChange = (localeKey: Locale) => () => {\n    setSettings({\n      locale: localeKey,\n    });\n    closeMenu();\n  };\n\n  const [visible, setVisible] = React.useState(false);\n  const openMenu = () => setVisible(true);\n  const closeMenu = () => setVisible(false);\n\n  return (\n    <Menu\n      visible={visible}\n      onDismiss={closeMenu}\n      anchor={\n        <Button style={buttonStyle} mode=\"outlined\" onPress={openMenu}>\n          <T message=\"Choose language\" />\n        </Button>\n      }\n    >\n      {locales.map((l) => (\n        <Menu.Item\n          key={l.key}\n          onPress={handleLocaleChange(l.key)}\n          title={\n            <>\n              {l.localName} ({l.internationalName})\n            </>\n          }\n        />\n      ))}\n    </Menu>\n  );\n};\n\ninterface LocalSelectorProps {\n  buttonStyle: StyleProp<ViewStyle>;\n}\n\nexport default LocalSelector;\n","import React from \"react\";\nimport { T } from \"react-targem\";\nimport { Image } from \"react-native\";\nimport styles from \"./HomePage.styles\";\nimport LocalSelector from \"src/components/LocaleSelector\";\nimport { Button, Card, Title, Surface } from \"react-native-paper\";\nimport logo from \"./assets/logo.png\";\nimport { StackNavigationProp } from \"@react-navigation/stack\";\nimport { RootStackRoutes, RootStackRoute } from \"../types\";\n\nconst HomePage: React.FC<HomePageProps> = ({ navigation }: HomePageProps) => {\n  const handleLinkButtonClick = (routeName: RootStackRoute) => () => {\n    navigation.navigate(routeName);\n  };\n\n  return (\n    <Card style={styles.card}>\n      <Card.Content style={styles.cardContent}>\n        <Surface style={styles.cardImageContainer}>\n          <Image source={logo} style={styles.cardImage} />\n        </Surface>\n        <Title style={styles.cardTitle}>\n          <T message=\"Letz quiz!\" />\n        </Title>\n        <Button\n          mode=\"contained\"\n          onPress={handleLinkButtonClick(\"Game\")}\n          style={styles.cardButton}\n        >\n          <T message=\"Play\" />\n        </Button>\n        <Button\n          mode=\"outlined\"\n          onPress={handleLinkButtonClick(\"Rules\")}\n          style={styles.cardButton}\n        >\n          <T message=\"Rules\" />\n        </Button>\n        <LocalSelector buttonStyle={styles.cardButton} />\n      </Card.Content>\n    </Card>\n  );\n};\ninterface HomePageProps {\n  navigation: StackNavigationProp<RootStackRoutes, \"Home\">;\n}\n\nexport default HomePage;\n","import { StyleSheet } from \"react-native\";\n\nexport default StyleSheet.create({\n  container: {\n    minHeight: 200,\n    minWidth: 200,\n    alignSelf: \"center\",\n  },\n});\n","import React from \"react\";\nimport { T } from \"react-targem\";\nimport { Card, Paragraph } from \"react-native-paper\";\nimport styles from \"./RulesPage.styles\";\n\nconst RulesPage: React.FC<RulesPageProps> = () => {\n  return (\n    <Card style={styles.container}>\n      <Paragraph>\n        <T message=\"Within one game, the user is assigned 15 questions.\" />\n        <T message=\"Points are awarded for each correct answer (quiz coins)\" />\n        <T message=\"After passing all the questions, the general stratistics of the user is formed.\" />\n      </Paragraph>\n    </Card>\n  );\n};\ninterface RulesPageProps {}\n\nexport default RulesPage;\n","import { StyleSheet } from \"react-native\";\n\nexport default StyleSheet.create({\n  card: {\n    height: \"100%\",\n    width: \"100%\",\n    borderRadius: 0,\n  },\n  buttonsContainer: {\n    display: \"flex\",\n    flexWrap: \"wrap\",\n    justifyContent: \"center\",\n    marginBottom: 32,\n  },\n  button: {\n    marginTop: 16,\n    marginBottom: 16,\n    paddingTop: 16,\n    paddingBottom: 16,\n    minWidth: \"90%\",\n    minHeight: 65,\n    flex: 1,\n    justifyContent: \"center\",\n  },\n  buttonSuccess: {\n    backgroundColor: \"green\",\n  },\n  title: {\n    marginTop: 32,\n    marginBottom: 8,\n  },\n});\n","import React from \"react\";\nimport { T } from \"react-targem\";\nimport styles from \"./GamePage.styles\";\nimport {\n  Button,\n  Card,\n  Title,\n  Avatar,\n  ProgressBar,\n  Snackbar,\n} from \"react-native-paper\";\n\nconst LeftContent: React.FC<CardTitleAddon> = (props: CardTitleAddon) => (\n  <Avatar.Text {...props} label=\"Q\" />\n);\n\ninterface CardTitleAddon {\n  size: number;\n}\n\nconst successTheme = {\n  colors: {\n    primary: \"#8BC34A\",\n  },\n};\n\nconst warningTheme = {\n  colors: {\n    primary: \"#FF5722\",\n  },\n};\n\nconst getButtonTheme = (isCorrect: boolean, isIncorrect: boolean) => {\n  if (isCorrect) {\n    return successTheme;\n  }\n  if (isIncorrect) {\n    return warningTheme;\n  }\n  return undefined;\n};\n\nconst GamePage: React.FC<GamePageProps> = ({\n  totalQuestionsCount,\n  currentQuestionNumber,\n  question,\n  answers,\n  isQuestionLoading,\n  onBackButtonClick,\n  onAnswerClick,\n  questionLoadingId,\n  correctAnswerId,\n  incorrectAnswerId,\n}: GamePageProps) => {\n  const RightContent: React.FC<CardTitleAddon> = (props: CardTitleAddon) => (\n    <Button onPress={onBackButtonClick}>\n      <T message=\"Back\" />\n    </Button>\n  );\n\n  const handleAnswerClick = (answerId: string) => () => {\n    onAnswerClick(answerId);\n  };\n\n  return (\n    <Card style={styles.card}>\n      <Card.Title\n        title={\n          <>\n            <T message={\"Quiz question #\"} />\n            {currentQuestionNumber}\n          </>\n        }\n        subtitle={\n          <>\n            <T message=\"out of\" /> {totalQuestionsCount}\n          </>\n        }\n        left={LeftContent}\n        right={RightContent}\n      />\n      <Card.Cover\n        accessible={false}\n        source={{ uri: \"https://source.unsplash.com/random?quiz\" }}\n      />\n      {isQuestionLoading ? <ProgressBar indeterminate /> : null}\n      {question ? (\n        <Card.Content>\n          <Title style={styles.title}>\n            {question.count} {question.what.toLowerCase()} <T message=\"in\" />{\" \"}\n            {question.where}.{\" \"}\n            <T message=\"What else do you think my contain number\" />{\" \"}\n            {question.count}?\n          </Title>\n        </Card.Content>\n      ) : null}\n      {answers ? (\n        <Card.Actions style={styles.buttonsContainer}>\n          {answers.map((a) => (\n            <Button\n              key={a.id}\n              onPress={handleAnswerClick(a.id)}\n              style={styles.button}\n              mode=\"contained\"\n              disabled={questionLoadingId !== undefined}\n              loading={questionLoadingId === a.id}\n              theme={getButtonTheme(\n                correctAnswerId === a.id,\n                incorrectAnswerId === a.id\n              )}\n            >\n              {questionLoadingId === a.id ? null : (\n                <>\n                  {a.what} <T message=\"in\" /> {a.where}\n                </>\n              )}\n            </Button>\n          ))}\n        </Card.Actions>\n      ) : null}\n      {correctAnswerId && !incorrectAnswerId ? (\n        // eslint-disable-next-line @typescript-eslint/no-empty-function\n        <Snackbar visible onDismiss={() => {}}>\n          <T message=\"Hooray! This is the correct answer!\" />\n        </Snackbar>\n      ) : null}\n      {incorrectAnswerId ? (\n        // eslint-disable-next-line @typescript-eslint/no-empty-function\n        <Snackbar visible onDismiss={() => {}}>\n          <T message=\"Ohh nooo... This is an incorrect answer...\" />\n        </Snackbar>\n      ) : null}\n    </Card>\n  );\n};\n\ninterface GamePageProps {\n  currentQuestionNumber: number;\n  totalQuestionsCount: number;\n  isQuestionLoading: boolean;\n  questionLoadingId?: string;\n  correctAnswerId?: string;\n  incorrectAnswerId?: string;\n  question?: {\n    what: string;\n    count: number;\n    where: string;\n  } | null;\n  answers?:\n    | {\n        what: string;\n        where: string;\n        id: string;\n      }[]\n    | null;\n  onBackButtonClick: () => void;\n  onAnswerClick: (answerId: string) => void;\n}\n\nexport default GamePage;\n","import React from \"react\";\nimport { StackNavigationProp } from \"@react-navigation/stack\";\nimport { RootStackRoutes, RootStackRoute } from \"../types\";\nimport GamePage from \"./GamePage\";\n\nconst GamePageContainer: React.FC<GamePageContainerProps> = ({\n  navigation,\n}: GamePageContainerProps) => {\n  const handleLinkButtonClick = (routeName: RootStackRoute) => () => {\n    navigation.navigate(routeName);\n  };\n\n  const handleAnswerClick = () => {\n    // eslint-disable-next-line no-console\n    console.log(\"Answer is clicked!\");\n  };\n\n  const currentQuestionNumber = 1;\n  const totalQuestionsCount = 20;\n\n  return (\n    <GamePage\n      currentQuestionNumber={currentQuestionNumber}\n      isQuestionLoading={true}\n      totalQuestionsCount={totalQuestionsCount}\n      onBackButtonClick={handleLinkButtonClick(\"Home\")}\n      onAnswerClick={handleAnswerClick}\n    />\n  );\n};\n\ninterface GamePageContainerProps {\n  navigation: StackNavigationProp<RootStackRoutes, \"Game\">;\n}\n\nexport default GamePageContainer;\n","import { createStackNavigator } from \"@react-navigation/stack\";\nimport React from \"react\";\nimport HomePage from \"./HomePage\";\nimport RulesPage from \"./RulesPage\";\nimport GamePage from \"./GamePage\";\n\nconst Stack = createStackNavigator();\n\nconst Pages: React.FC<HomePageProps> = () => {\n  return (\n    <Stack.Navigator initialRouteName=\"Home\" headerMode=\"none\">\n      <Stack.Screen name=\"Home\" component={HomePage} />\n      <Stack.Screen name=\"Rules\" component={RulesPage} />\n      <Stack.Screen name=\"Game\" component={GamePage} />\n    </Stack.Navigator>\n  );\n};\ninterface HomePageProps {}\n\nexport default Pages;\n","import React from \"react\";\nimport AppLayout from \"./src/components/AppLayout\";\nimport Pages from \"./src/pages\";\n\nconst App: React.FC = () => {\n  return (\n    <AppLayout>\n      <Pages />\n    </AppLayout>\n  );\n};\n\nexport default App;\n"],"sourceRoot":""}